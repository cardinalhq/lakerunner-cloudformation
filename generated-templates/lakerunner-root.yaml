Conditions:
  CreateECSCollectorCondition: !And
    - !Equals
      - !Ref 'CreateECSInfrastructure'
      - 'Yes'
    - !Equals
      - !Ref 'CreateECSCollector'
      - 'Yes'
  CreateECSGrafanaCondition: !And
    - !Equals
      - !Ref 'CreateECSInfrastructure'
      - 'Yes'
    - !Equals
      - !Ref 'CreateECSGrafana'
      - 'Yes'
  CreateECSInfraCondition: !Equals
    - !Ref 'CreateECSInfrastructure'
    - 'Yes'
  CreateECSServicesCondition: !And
    - !Equals
      - !Ref 'CreateECSInfrastructure'
      - 'Yes'
    - !Equals
      - !Ref 'CreateECSServices'
      - 'Yes'
  CreateMSKCondition: !Equals
    - !Ref 'CreateMSK'
    - 'Yes'
  CreateRDSCondition: !Equals
    - !Ref 'CreateRDS'
    - 'Yes'
  CreateS3StorageCondition: !Equals
    - !Ref 'CreateS3Storage'
    - 'Yes'
  HasPublicSubnetsCondition: !And
    - !Not
      - !Equals
        - !Ref 'PublicSubnet1Id'
        - ''
    - !Not
      - !Equals
        - !Ref 'PublicSubnet2Id'
        - ''
Description: Lakerunner infrastructure deployment with modular create-or-bring-your-own options
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Template Configuration
        Parameters:
          - TemplateBaseUrl
      - Label:
          default: Infrastructure Selection
        Parameters:
          - VPCId
          - PrivateSubnet1Id
          - PrivateSubnet2Id
          - PublicSubnet1Id
          - PublicSubnet2Id
      - Label:
          default: Infrastructure Creation Options
        Parameters:
          - CreateS3Storage
          - CreateRDS
          - DbInstanceClass
          - CreateMSK
          - MSKInstanceType
          - MSKBrokerNodes
      - Label:
          default: Service Deployment Options
        Parameters:
          - CreateECSInfrastructure
          - CreateECSServices
          - CreateECSCollector
          - CreateECSGrafana
      - Label:
          default: Existing Resources (BYO)
        Parameters:
          - ExistingBucketArn
          - ExistingDatabaseEndpoint
          - ExistingDatabaseSecretArn
          - ExistingTaskRoleArn
          - ExistingMSKClusterArn
          - ExistingClusterArn
          - ExistingSecurityGroupId
          - AlbScheme
    ParameterLabels:
      AlbScheme:
        default: ALB Scheme
      CreateECSCollector:
        default: Deploy OTEL Collector?
      CreateECSGrafana:
        default: Deploy Grafana Dashboard?
      CreateECSInfrastructure:
        default: Create ECS Infrastructure?
      CreateECSServices:
        default: Deploy ECS Services?
      CreateMSK:
        default: Create MSK Kafka?
      CreateRDS:
        default: Create RDS Database?
      CreateS3Storage:
        default: Create S3 Storage?
      DbInstanceClass:
        default: RDS Instance Class
      ExistingBucketArn:
        default: Existing Bucket ARN
      ExistingClusterArn:
        default: Existing ECS Cluster ARN
      ExistingDatabaseEndpoint:
        default: Existing DB Endpoint
      ExistingDatabaseSecretArn:
        default: Existing DB Secret ARN
      ExistingMSKClusterArn:
        default: Existing MSK Cluster ARN
      ExistingSecurityGroupId:
        default: Existing Security Group ID
      ExistingTaskRoleArn:
        default: Existing Task Role ARN
      MSKBrokerNodes:
        default: MSK Broker Nodes
      MSKInstanceType:
        default: MSK Instance Type
      PrivateSubnet1Id:
        default: Private Subnet 1 ID
      PrivateSubnet2Id:
        default: Private Subnet 2 ID
      PublicSubnet1Id:
        default: Public Subnet 1 ID (optional)
      PublicSubnet2Id:
        default: Public Subnet 2 ID (optional)
      VPCId:
        default: VPC ID
Outputs:
  BucketArn:
    Description: S3 bucket ARN for ingest (created or existing)
    Export:
      Name: !Sub '${AWS::StackName}-BucketArn'
    Value: !If
      - CreateS3StorageCondition
      - !GetAtt 'StorageStack.Outputs.BucketArn'
      - !Ref 'ExistingBucketArn'
  BucketName:
    Description: S3 bucket name for ingest (created or existing)
    Export:
      Name: !Sub '${AWS::StackName}-BucketName'
    Value: !If
      - CreateS3StorageCondition
      - !GetAtt 'StorageStack.Outputs.BucketName'
      - !Select
        - 5
        - !Split
          - /
          - !Ref 'ExistingBucketArn'
  ClusterArn:
    Condition: CreateECSInfraCondition
    Description: ECS cluster ARN (only available when ECS infrastructure is created)
    Export:
      Name: !Sub '${AWS::StackName}-ClusterArn'
    Value: !GetAtt 'ECSStack.Outputs.ClusterArn'
  DatabaseEndpoint:
    Description: RDS database endpoint (created or existing)
    Export:
      Name: !Sub '${AWS::StackName}-DatabaseEndpoint'
    Value: !If
      - CreateRDSCondition
      - !GetAtt 'RDSStack.Outputs.DbEndpoint'
      - !Ref 'ExistingDatabaseEndpoint'
  DatabasePort:
    Description: RDS database port
    Export:
      Name: !Sub '${AWS::StackName}-DatabasePort'
    Value: !If
      - CreateRDSCondition
      - !GetAtt 'RDSStack.Outputs.DbPort'
      - '5432'
  DatabaseSecretArn:
    Description: RDS database secret ARN (created or existing)
    Export:
      Name: !Sub '${AWS::StackName}-DatabaseSecretArn'
    Value: !If
      - CreateRDSCondition
      - !GetAtt 'RDSStack.Outputs.DbSecretArn'
      - !Ref 'ExistingDatabaseSecretArn'
  MSKClusterArn:
    Description: MSK cluster ARN (created or existing)
    Export:
      Name: !Sub '${AWS::StackName}-MSKClusterArn'
    Value: !If
      - CreateMSKCondition
      - !GetAtt 'MSKStack.Outputs.MSKClusterArn'
      - !Ref 'ExistingMSKClusterArn'
  PrivateSubnets:
    Description: Selected private subnet IDs
    Export:
      Name: !Sub '${AWS::StackName}-PrivateSubnets'
    Value: !Sub '${PrivateSubnet1Id},${PrivateSubnet2Id}'
  PublicSubnets:
    Condition: HasPublicSubnetsCondition
    Description: Selected public subnet IDs
    Export:
      Name: !Sub '${AWS::StackName}-PublicSubnets'
    Value: !Sub '${PublicSubnet1Id},${PublicSubnet2Id}'
  TaskSecurityGroupId:
    Condition: CreateECSInfraCondition
    Description: ECS task security group ID (only available when ECS infrastructure is created)
    Export:
      Name: !Sub '${AWS::StackName}-TaskSGId'
    Value: !GetAtt 'ECSStack.Outputs.TaskSGId'
  VPCId:
    Description: Selected VPC ID
    Export:
      Name: !Sub '${AWS::StackName}-VPCId'
    Value: !Ref 'VPCId'
Parameters:
  AlbScheme:
    AllowedValues:
      - internet-facing
      - internal
    Default: internal
    Description: 'Load balancer scheme: ''internet-facing'' for external access or ''internal'' for internal access only.'
    Type: String
  CreateECSCollector:
    AllowedValues:
      - 'Yes'
      - 'No'
    Default: 'Yes'
    Description: Deploy OTEL Collector service?
    Type: String
  CreateECSGrafana:
    AllowedValues:
      - 'Yes'
      - 'No'
    Default: 'No'
    Description: Deploy Grafana dashboard?
    Type: String
  CreateECSInfrastructure:
    AllowedValues:
      - 'Yes'
      - 'No'
    Default: 'Yes'
    Description: Create ECS cluster and infrastructure?
    Type: String
  CreateECSServices:
    AllowedValues:
      - 'Yes'
      - 'No'
    Default: 'Yes'
    Description: Deploy ECS services for Lakerunner?
    Type: String
  CreateMSK:
    AllowedValues:
      - 'Yes'
      - 'No'
    Default: 'Yes'
    Description: Create Amazon MSK (Kafka) cluster?
    Type: String
  CreateRDS:
    AllowedValues:
      - 'Yes'
      - 'No'
    Default: 'Yes'
    Description: Create Aurora PostgreSQL database?
    Type: String
  CreateS3Storage:
    AllowedValues:
      - 'Yes'
      - 'No'
    Default: 'Yes'
    Description: Create S3 bucket and SQS queue for data ingestion?
    Type: String
  DbInstanceClass:
    AllowedValues:
      - db.r6g.large
      - db.r6g.xlarge
      - db.r6g.2xlarge
      - db.r6g.4xlarge
      - db.r6g.8xlarge
      - db.r6g.12xlarge
      - db.r6g.16xlarge
    Default: db.r6g.large
    Description: RDS instance class.
    Type: String
  ExistingBucketArn:
    Default: ''
    Description: Existing S3 bucket ARN. Required when CreateS3Storage=No.
    Type: String
  ExistingClusterArn:
    Default: ''
    Description: Existing ECS cluster ARN. Required when CreateECSInfrastructure=No and CreateECSServices=Yes.
    Type: String
  ExistingDatabaseEndpoint:
    Default: ''
    Description: Existing database endpoint. Required when CreateRDS=No.
    Type: String
  ExistingDatabaseSecretArn:
    Default: ''
    Description: Existing database secret ARN. Required when CreateRDS=No.
    Type: String
  ExistingMSKClusterArn:
    Default: ''
    Description: Existing MSK cluster ARN. Required when CreateMSK=No.
    Type: String
  ExistingSecurityGroupId:
    Default: ''
    Description: Existing security group ID for ECS tasks. Required when CreateECSInfrastructure=No and CreateECSServices=Yes.
    Type: String
  ExistingTaskRoleArn:
    Default: ''
    Description: Existing task role ARN with permissions for BYO resources. Required when using any existing resources.
    Type: String
  MSKBrokerNodes:
    Default: 2
    Description: Number of MSK broker nodes. Must be between 2 and 15.
    MaxValue: 15
    MinValue: 2
    Type: Number
  MSKInstanceType:
    AllowedValues:
      - kafka.t3.small
      - kafka.m5.large
      - kafka.m5.xlarge
      - kafka.m5.2xlarge
      - kafka.m5.4xlarge
      - kafka.m5.8xlarge
      - kafka.m5.12xlarge
      - kafka.m5.16xlarge
      - kafka.m5.24xlarge
      - kafka.m7g.large
      - kafka.m7g.xlarge
      - kafka.m7g.2xlarge
      - kafka.m7g.4xlarge
      - kafka.m7g.8xlarge
      - kafka.m7g.12xlarge
      - kafka.m7g.16xlarge
    Default: kafka.t3.small
    Description: MSK broker instance type.
    Type: String
  PrivateSubnet1Id:
    Description: First private subnet ID (from Part 1 Landscape stack or existing subnet).
    Type: AWS::EC2::Subnet::Id
  PrivateSubnet2Id:
    Description: Second private subnet ID (from Part 1 Landscape stack or existing subnet).
    Type: AWS::EC2::Subnet::Id
  PublicSubnet1Id:
    Default: ''
    Description: First public subnet ID (from Part 1 Landscape stack or existing subnet). Optional.
    Type: String
  PublicSubnet2Id:
    Default: ''
    Description: Second public subnet ID (from Part 1 Landscape stack or existing subnet). Optional.
    Type: String
  TemplateBaseUrl:
    Description: Base URL where nested templates are stored (e.g., https://s3.amazonaws.com/bucket/templates/)
    Type: String
  VPCId:
    Description: VPC ID to use for deployment (from Part 1 Landscape stack or existing VPC).
    Type: AWS::EC2::VPC::Id
Resources:
  ECSStack:
    Condition: CreateECSInfraCondition
    Properties:
      Parameters:
        VpcId: !Ref 'VPCId'
      Tags:
        - Key: Component
          Value: ECS
        - Key: Environment
          Value: !Ref 'AWS::StackName'
        - Key: ManagedBy
          Value: Lakerunner
      TemplateURL: !Sub '${TemplateBaseUrl}/lakerunner-ecs.yaml'
    Type: AWS::CloudFormation::Stack
  EcsCollectorStack:
    Condition: CreateECSCollectorCondition
    Properties:
      Parameters:
        CommonInfraStackName: !Ref 'AWS::StackName'
        LoadBalancerType: !Ref 'AlbScheme'
      Tags:
        - Key: Component
          Value: Collector
        - Key: Environment
          Value: !Ref 'AWS::StackName'
        - Key: ManagedBy
          Value: Lakerunner
      TemplateURL: !Sub '${TemplateBaseUrl}/lakerunner-ecs-collector.yaml'
    Type: AWS::CloudFormation::Stack
  EcsGrafanaStack:
    Condition: CreateECSGrafanaCondition
    Properties:
      Parameters:
        AlbScheme: !Ref 'AlbScheme'
        CommonInfraStackName: !Ref 'AWS::StackName'
        ServicesStackName: !If
          - CreateECSServicesCondition
          - !Ref 'EcsServicesStack'
          - ''
      Tags:
        - Key: Component
          Value: Grafana
        - Key: Environment
          Value: !Ref 'AWS::StackName'
        - Key: ManagedBy
          Value: Lakerunner
      TemplateURL: !Sub '${TemplateBaseUrl}/lakerunner-ecs-grafana.yaml'
    Type: AWS::CloudFormation::Stack
  EcsServicesStack:
    Condition: CreateECSServicesCondition
    Properties:
      Parameters:
        AlbScheme: !Ref 'AlbScheme'
        BucketArn: !If
          - CreateS3StorageCondition
          - !GetAtt 'StorageStack.Outputs.BucketArn'
          - !Ref 'ExistingBucketArn'
        ClusterArn: !If
          - CreateECSInfraCondition
          - !GetAtt 'ECSStack.Outputs.ClusterArn'
          - !Ref 'ExistingClusterArn'
        DbHost: !If
          - CreateRDSCondition
          - !GetAtt 'RDSStack.Outputs.DbEndpoint'
          - !Ref 'ExistingDatabaseEndpoint'
        DbPort: !If
          - CreateRDSCondition
          - !GetAtt 'RDSStack.Outputs.DbPort'
          - '5432'
        DbSecretArn: !If
          - CreateRDSCondition
          - !GetAtt 'RDSStack.Outputs.DbSecretArn'
          - !Ref 'ExistingDatabaseSecretArn'
        MSKClusterArn: !If
          - CreateMSKCondition
          - !GetAtt 'MSKStack.Outputs.MSKClusterArn'
          - !Ref 'ExistingMSKClusterArn'
        MSKCredentialsArn: !If
          - CreateMSKCondition
          - !GetAtt 'MSKStack.Outputs.MSKCredentialsArn'
          - ''
        PrivateSubnets: !Sub '${PrivateSubnet1Id},${PrivateSubnet2Id}'
        PublicSubnets: !If
          - HasPublicSubnetsCondition
          - !Sub '${PublicSubnet1Id},${PublicSubnet2Id}'
          - ''
        StorageStackName: !If
          - CreateS3StorageCondition
          - !Ref 'StorageStack'
          - ''
        TaskSecurityGroupId: !If
          - CreateECSInfraCondition
          - !GetAtt 'ECSStack.Outputs.TaskSGId'
          - !Ref 'ExistingSecurityGroupId'
        VpcId: !Ref 'VPCId'
      Tags:
        - Key: Component
          Value: Services
        - Key: Environment
          Value: !Ref 'AWS::StackName'
        - Key: ManagedBy
          Value: Lakerunner
      TemplateURL: !Sub '${TemplateBaseUrl}/lakerunner-ecs-services.yaml'
    Type: AWS::CloudFormation::Stack
  EcsSetupStack:
    Condition: CreateRDSCondition
    Properties:
      Parameters:
        CommonInfraStackName: !Ref 'AWS::StackName'
      Tags:
        - Key: Component
          Value: EcsSetup
        - Key: Environment
          Value: !Ref 'AWS::StackName'
        - Key: ManagedBy
          Value: Lakerunner
      TemplateURL: !Sub '${TemplateBaseUrl}/lakerunner-ecs-setup.yaml'
    Type: AWS::CloudFormation::Stack
  MSKStack:
    Condition: CreateMSKCondition
    Properties:
      Parameters:
        ExistingTaskRoleArn: !Ref 'ExistingTaskRoleArn'
        MSKBrokerNodes: !Ref 'MSKBrokerNodes'
        MSKInstanceType: !Ref 'MSKInstanceType'
        PrivateSubnets: !Sub '${PrivateSubnet1Id},${PrivateSubnet2Id}'
        VpcId: !Ref 'VPCId'
      Tags:
        - Key: Component
          Value: MSK
        - Key: Environment
          Value: !Ref 'AWS::StackName'
        - Key: ManagedBy
          Value: Lakerunner
      TemplateURL: !Sub '${TemplateBaseUrl}/lakerunner-msk.yaml'
    Type: AWS::CloudFormation::Stack
  RDSStack:
    Condition: CreateRDSCondition
    Properties:
      Parameters:
        DbInstanceClass: !Ref 'DbInstanceClass'
        ExistingTaskRoleArn: !Ref 'ExistingTaskRoleArn'
        PrivateSubnets: !Sub '${PrivateSubnet1Id},${PrivateSubnet2Id}'
        VpcId: !Ref 'VPCId'
      Tags:
        - Key: Component
          Value: Database
        - Key: Environment
          Value: !Ref 'AWS::StackName'
        - Key: ManagedBy
          Value: Lakerunner
      TemplateURL: !Sub '${TemplateBaseUrl}/lakerunner-rds.yaml'
    Type: AWS::CloudFormation::Stack
  StorageStack:
    Condition: CreateS3StorageCondition
    Properties:
      Parameters:
        ExistingTaskRoleArn: !Ref 'ExistingTaskRoleArn'
      Tags:
        - Key: Component
          Value: Storage
        - Key: Environment
          Value: !Ref 'AWS::StackName'
        - Key: ManagedBy
          Value: Lakerunner
      TemplateURL: !Sub '${TemplateBaseUrl}/lakerunner-storage.yaml'
    Type: AWS::CloudFormation::Stack

