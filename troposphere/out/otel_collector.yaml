Conditions:
  IsInternal: !Equals
    - !Ref 'LoadBalancerType'
    - internal
Description: 'Lakerunner OTEL Collector: ECS service with ALB for telemetry ingestion'
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Infrastructure
        Parameters:
          - CommonInfraStackName
          - LoadBalancerType
      - Label:
          default: Container Images
        Parameters:
          - OtelCollectorImage
      - Label:
          default: Customer Configuration
        Parameters:
          - OrganizationId
          - CollectorName
          - ForceReplaceConfig
    ParameterLabels:
      CollectorName:
        default: Collector Name
      CommonInfraStackName:
        default: Common Infra Stack Name
      ForceReplaceConfig:
        default: Force Replace Config
      LoadBalancerType:
        default: Load Balancer Type
      OrganizationId:
        default: Organization ID
      OtelCollectorImage:
        default: OTEL Collector Image
Outputs:
  GrpcEndpoint:
    Description: OTEL gRPC endpoint URL
    Export:
      Name: !Sub '${AWS::StackName}-GrpcEndpoint'
    Value: !Sub
      - http://${LoadBalancerDNS}:4317
      - LoadBalancerDNS: !GetAtt 'ApplicationLoadBalancer.DNSName'
  HttpEndpoint:
    Description: OTEL HTTP endpoint URL
    Export:
      Name: !Sub '${AWS::StackName}-HttpEndpoint'
    Value: !Sub
      - http://${LoadBalancerDNS}:4318
      - LoadBalancerDNS: !GetAtt 'ApplicationLoadBalancer.DNSName'
  LoadBalancerDNS:
    Description: DNS name of the OTEL collector load balancer
    Export:
      Name: !Sub '${AWS::StackName}-LoadBalancerDNS'
    Value: !GetAtt 'ApplicationLoadBalancer.DNSName'
  OtelConfigAccessPointId:
    Description: EFS Access Point ID for OTEL configuration. Upload config.yaml to this location.
    Export:
      Name: !Sub '${AWS::StackName}-OtelConfigAccessPointId'
    Value: !Ref 'OtelConfigAccessPoint'
  ServiceArn:
    Description: ARN of the OTEL gateway service
    Export:
      Name: !Sub '${AWS::StackName}-ServiceArn'
    Value: !Ref 'ServiceOtelGateway'
Parameters:
  CollectorName:
    Default: lakerunner
    Description: Collector name for OTEL data routing
    Type: String
  CommonInfraStackName:
    Description: 'REQUIRED: Name of the CommonInfra stack to import infrastructure values from.'
    Type: String
  ForceReplaceConfig:
    AllowedValues:
      - 'true'
      - 'false'
    Default: 'false'
    Description: 'Whether to force replace the OTEL config file during stack creation (default: false)'
    Type: String
  LoadBalancerType:
    AllowedValues:
      - internal
      - internet-facing
    Default: internal
    Description: Whether to create an internal or external ALB for the OTEL collector.
    Type: String
  OrganizationId:
    Default: 12340000-0000-4000-8000-000000000000
    Description: Organization ID for OTEL data routing
    Type: String
  OtelCollectorImage:
    Default: public.ecr.aws/cardinalhq.io/cardinalhq-otel-collector:latest
    Description: Container image for OTEL collector service
    Type: String
Resources:
  AlbSecurityGroup:
    Properties:
      GroupDescription: Security group for OTEL collector ALB
      SecurityGroupIngress:
        - CidrIp: '0.0.0.0/0'
          Description: OTEL gRPC receiver
          FromPort: 4317
          IpProtocol: tcp
          ToPort: 4317
        - CidrIp: '0.0.0.0/0'
          Description: OTEL HTTP receiver
          FromPort: 4318
          IpProtocol: tcp
          ToPort: 4318
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-alb-sg'
      VpcId: !ImportValue
        Fn::Sub:
          - ${CommonInfraStackName}-VpcId
          - CommonInfraStackName: !Ref 'CommonInfraStackName'
    Type: AWS::EC2::SecurityGroup
  ApplicationLoadBalancer:
    Properties:
      IpAddressType: ipv4
      Name: !Sub '${AWS::StackName}-alb'
      Scheme: !If
        - IsInternal
        - internal
        - internet-facing
      SecurityGroups:
        - !Ref 'AlbSecurityGroup'
      Subnets: !If
        - IsInternal
        - !Split
          - ','
          - !ImportValue
            Fn::Sub:
              - ${CommonInfraStackName}-PrivateSubnets
              - CommonInfraStackName: !Ref 'CommonInfraStackName'
        - !Split
          - ','
          - !ImportValue
            Fn::Sub:
              - ${CommonInfraStackName}-PublicSubnets
              - CommonInfraStackName: !Ref 'CommonInfraStackName'
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-alb'
      Type: application
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
  ConfigUploader:
    Properties:
      AccessPointId: !Ref 'OtelConfigAccessPoint'
      EfsId: !ImportValue
        Fn::Sub:
          - ${CommonInfraStackName}-EfsId
          - CommonInfraStackName: !Ref 'CommonInfraStackName'
      ForceReplace: !Ref 'ForceReplaceConfig'
      ServiceToken: !GetAtt 'ConfigUploaderFunction.Arn'
    Type: AWS::CloudFormation::CustomResource
  ConfigUploaderFunction:
    Properties:
      Code:
        ZipFile: "\nimport json\nimport boto3\nimport os\nimport urllib3\nimport base64\n\ndef send_response(event, context, response_status, response_data=None, physical_resource_id=None):\n    if response_data\
          \ is None:\n        response_data = {}\n    \n    response_url = event['ResponseURL']\n    response_body = {\n        'Status': response_status,\n        'Reason': f'See CloudWatch Log Stream:\
          \ {context.log_stream_name}',\n        'PhysicalResourceId': physical_resource_id or context.log_stream_name,\n        'StackId': event['StackId'],\n        'RequestId': event['RequestId'],\n\
          \        'LogicalResourceId': event['LogicalResourceId'],\n        'Data': response_data\n    }\n    \n    json_response = json.dumps(response_body)\n    headers = {'Content-Type': 'application/json'}\n\
          \    \n    http = urllib3.PoolManager()\n    response = http.request('PUT', response_url, body=json_response, headers=headers)\n    print(f\"Response status: {response.status}\")\n\ndef lambda_handler(event,\
          \ context):\n    print(f\"Event: {json.dumps(event)}\")\n    \n    try:\n        request_type = event.get('RequestType')\n        if request_type == 'Delete':\n            send_response(event,\
          \ context, 'SUCCESS')\n            return\n        \n        force_replace = event['ResourceProperties'].get('ForceReplace', 'false').lower() == 'true'\n        \n        # Decode the base64 config\
          \ content\n        config_content = base64.b64decode('IyBPVEVMIENvbGxlY3RvciBDb25maWd1cmF0aW9uCiMgVGhpcyBpcyBhIHBsYWNlaG9sZGVyIGNvbmZpZ3VyYXRpb24gZm9yIHRoZSBDYXJkaW5hbEhRIE9URUwgQ29sbGVjdG9yCiMgTW9kaWZ5IHRoaXMgZmlsZSBhY2NvcmRpbmcgdG8geW91ciBzcGVjaWZpYyB0ZWxlbWV0cnkgcmVxdWlyZW1lbnRzCgpyZWNlaXZlcnM6CiAgb3RscDoKICAgIHByb3RvY29sczoKICAgICAgZ3JwYzoKICAgICAgICBlbmRwb2ludDogMC4wLjAuMDo0MzE3CiAgICAgIGh0dHA6CiAgICAgICAgZW5kcG9pbnQ6IDAuMC4wLjA6NDMxOAoKcHJvY2Vzc29yczoKICBtZW1vcnlfbGltaXRlcjoKICAgIGxpbWl0X21pYjogMTAyNAoKICBiYXRjaDoKICAgIHNlbmRfYmF0Y2hfbWF4X3NpemU6IDEwMAogICAgc2VuZF9iYXRjaF9zaXplOiAxMAogICAgdGltZW91dDogMXMKCmV4cG9ydGVyczoKICBjaHFzMzoKICAgIGJ1ZmZlcmluZzoKICAgICAgZGlyZWN0b3J5OiAvc2NyYXRjaAogICAgICB0eXBlOiBkaXNrCiAgICBzM3VwbG9hZGVyOgogICAgICBjdXN0b21lcl9rZXk6ICR7ZW52Ok9SR0FOSVpBVElPTl9JRH0vJHtlbnY6Q09MTEVDVE9SX05BTUV9CiAgICAgIHJlZ2lvbjogJHtlbnY6QVdTX1JFR0lPTn0KICAgICAgczNfYnVja2V0OiAke2VudjpBV1NfUzNfQlVDS0VUfQogICAgICBzM19mb3JjZV9wYXRoX3N0eWxlOiB0cnVlCiAgICAgIHMzX3BhcnRpdGlvbjogbWludXRlCiAgICAgIHMzX3ByZWZpeDogb3RlbC1yYXcKCiAgbm9wOgoKZXh0ZW5zaW9uczoKICBoZWFsdGhfY2hlY2s6CiAgICBlbmRwb2ludDogMC4wLjAuMDoxMzEzMwoKc2VydmljZToKICBleHRlbnNpb25zOgogICAgLSBoZWFsdGhfY2hlY2sKICBwaXBlbGluZXM6CiAgICB0cmFjZXM6CiAgICAgIHJlY2VpdmVyczoKICAgICAgICAtIG90bHAKICAgICAgcHJvY2Vzc29yczoKICAgICAgICAtIG1lbW9yeV9saW1pdGVyCiAgICAgIGV4cG9ydGVyczoKICAgICAgICAtIG5vcAoKICAgIG1ldHJpY3M6CiAgICAgIHJlY2VpdmVyczoKICAgICAgICAtIG90bHAKICAgICAgcHJvY2Vzc29yczoKICAgICAgICAtIG1lbW9yeV9saW1pdGVyCiAgICAgICAgLSBiYXRjaAogICAgICBleHBvcnRlcnM6CiAgICAgICAgLSBjaHFzMwoKICAgIGxvZ3M6CiAgICAgIHJlY2VpdmVyczoKICAgICAgICAtIG90bHAKICAgICAgcHJvY2Vzc29yczoKICAgICAgICAtIG1lbW9yeV9saW1pdGVyCiAgICAgICAgLSBiYXRjaAogICAgICBleHBvcnRlcnM6CiAgICAgICAgLSBjaHFzMwo=').decode()\n\
          \        \n        # For Lambda in VPC with EFS, the file system is mounted at /mnt/efs\n        # This requires the Lambda to have EFS file system configured\n        config_file_path = '/mnt/efs/config.yaml'\n\
          \        \n        # Check if file exists and force_replace setting\n        file_exists = os.path.exists(config_file_path)\n        should_write = force_replace or not file_exists\n        \n\
          \        if should_write:\n            # Ensure directory exists\n            os.makedirs(os.path.dirname(config_file_path), exist_ok=True)\n            \n            # Write the config file\n\
          \            with open(config_file_path, 'w') as f:\n                f.write(config_content)\n            \n            print(f\"Config file written to {config_file_path} (force_replace={force_replace},\
          \ existed={file_exists})\")\n            \n            response_data = {\n                'ConfigPath': config_file_path,\n                'Action': 'replaced' if file_exists else 'created',\n\
          \                'ForceReplace': force_replace\n            }\n        else:\n            print(f\"Config file already exists at {config_file_path} and force_replace is false\")\n            response_data\
          \ = {\n                'ConfigPath': config_file_path,\n                'Action': 'skipped',\n                'ForceReplace': force_replace\n            }\n        \n        send_response(event,\
          \ context, 'SUCCESS', response_data)\n        \n    except Exception as e:\n        print(f\"Error: {str(e)}\")\n        import traceback\n        traceback.print_exc()\n        send_response(event,\
          \ context, 'FAILED')\n        raise\n"
      FileSystemConfigs:
        - Arn: !GetAtt 'OtelConfigAccessPoint.Arn'
          LocalMountPath: /mnt/efs
      FunctionName: !Sub '${AWS::StackName}-config-uploader'
      Handler: index.lambda_handler
      Role: !GetAtt 'LambdaExecutionRole.Arn'
      Runtime: python3.9
      Timeout: 300
      VpcConfig:
        SecurityGroupIds:
          - !Ref 'TaskSecurityGroup'
        SubnetIds: !Split
          - ','
          - !ImportValue
            Fn::Sub:
              - ${CommonInfraStackName}-PrivateSubnets
              - CommonInfraStackName: !Ref 'CommonInfraStackName'
    Type: AWS::Lambda::Function
  ExecRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: '2012-10-17'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - ssm:GetParameter
                  - ssm:GetParameters
                Effect: Allow
                Resource:
                  - !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/otel/*'
            Version: '2012-10-17'
          PolicyName: SSMParameterAccess
      RoleName: !Sub '${AWS::StackName}-exec-role'
    Type: AWS::IAM::Role
  GrpcListener:
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref 'OtelGrpcTargetGroup'
          Type: forward
      LoadBalancerArn: !Ref 'ApplicationLoadBalancer'
      Port: 4317
      Protocol: HTTP
    Type: AWS::ElasticLoadBalancingV2::Listener
  HttpListener:
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref 'OtelHttpTargetGroup'
          Type: forward
      LoadBalancerArn: !Ref 'ApplicationLoadBalancer'
      Port: 4318
      Protocol: HTTP
    Type: AWS::ElasticLoadBalancingV2::Listener
  LambdaExecutionRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: '2012-10-17'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - elasticfilesystem:ClientMount
                  - elasticfilesystem:ClientWrite
                  - elasticfilesystem:DescribeFileSystems
                  - elasticfilesystem:DescribeMountTargets
                  - elasticfilesystem:DescribeAccessPoints
                Effect: Allow
                Resource: '*'
            Version: '2012-10-17'
          PolicyName: EFSAccess
      RoleName: !Sub '${AWS::StackName}-lambda-role'
    Type: AWS::IAM::Role
  LogGroupOtelGateway:
    Properties:
      LogGroupName: !Sub '/ecs/otel-gateway'
      RetentionInDays: 14
    Type: AWS::Logs::LogGroup
  OtelConfigAccessPoint:
    Properties:
      AccessPointTags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-otel-config'
      FileSystemId: !ImportValue
        Fn::Sub:
          - ${CommonInfraStackName}-EfsId
          - CommonInfraStackName: !Ref 'CommonInfraStackName'
      PosixUser:
        Gid: '0'
        Uid: '0'
      RootDirectory:
        CreationInfo:
          OwnerGid: '0'
          OwnerUid: '0'
          Permissions: '755'
        Path: /otel-config
    Type: AWS::EFS::AccessPoint
  OtelGrpcTargetGroup:
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /
      HealthCheckPort: '13133'
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Matcher:
        HttpCode: '200'
      Name: !Sub '${AWS::StackName}-otel-grpc'
      Port: 4317
      Protocol: HTTP
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-otel-grpc-tg'
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: '30'
      TargetType: ip
      UnhealthyThresholdCount: 3
      VpcId: !ImportValue
        Fn::Sub:
          - ${CommonInfraStackName}-VpcId
          - CommonInfraStackName: !Ref 'CommonInfraStackName'
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
  OtelHttpTargetGroup:
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /
      HealthCheckPort: '13133'
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Matcher:
        HttpCode: '200'
      Name: !Sub '${AWS::StackName}-otel-http'
      Port: 4318
      Protocol: HTTP
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-otel-http-tg'
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: '30'
      TargetType: ip
      UnhealthyThresholdCount: 3
      VpcId: !ImportValue
        Fn::Sub:
          - ${CommonInfraStackName}-VpcId
          - CommonInfraStackName: !Ref 'CommonInfraStackName'
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
  ServiceOtelGateway:
    Properties:
      Cluster: !ImportValue
        Fn::Sub:
          - ${CommonInfraStackName}-ClusterArn
          - CommonInfraStackName: !Ref 'CommonInfraStackName'
      DesiredCount: '1'
      EnableExecuteCommand: true
      LaunchType: FARGATE
      LoadBalancers:
        - ContainerName: OtelCollector
          ContainerPort: 4317
          TargetGroupArn: !Ref 'OtelGrpcTargetGroup'
        - ContainerName: OtelCollector
          ContainerPort: 4318
          TargetGroupArn: !Ref 'OtelHttpTargetGroup'
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
            - !Ref 'TaskSecurityGroup'
          Subnets: !Split
            - ','
            - !ImportValue
              Fn::Sub:
                - ${CommonInfraStackName}-PrivateSubnets
                - CommonInfraStackName: !Ref 'CommonInfraStackName'
      ServiceName: otel-gateway
      TaskDefinition: !Ref 'TaskDefOtelGateway'
    Type: AWS::ECS::Service
  TaskDefOtelGateway:
    Properties:
      ContainerDefinitions:
        - Command:
            - /otelcol
            - --config=/etc/otel/config.yaml
          Environment:
            - Name: OTEL_SERVICE_NAME
              Value: otel-gateway
            - Name: AWS_S3_BUCKET
              Value: !ImportValue
                Fn::Sub:
                  - ${CommonInfraStackName}-BucketName
                  - CommonInfraStackName: !Ref 'CommonInfraStackName'
            - Name: AWS_REGION
              Value: !Ref 'AWS::Region'
            - Name: ORGANIZATION_ID
              Value: !Ref 'OrganizationId'
            - Name: COLLECTOR_NAME
              Value: !Ref 'CollectorName'
            - Name: OTEL_RESOURCE_ATTRIBUTES
              Value: service.name=otel-gateway
          HealthCheck:
            Command:
              - CMD-SHELL
              - curl -f http://localhost:13133/ || exit 1
            Interval: 30
            Retries: 3
            StartPeriod: 60
            Timeout: 5
          Image: !Ref 'OtelCollectorImage'
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref 'LogGroupOtelGateway'
              awslogs-region: !Ref 'AWS::Region'
              awslogs-stream-prefix: otel-gateway
          MountPoints:
            - ContainerPath: /scratch
              ReadOnly: false
              SourceVolume: scratch
            - ContainerPath: /etc/otel
              ReadOnly: true
              SourceVolume: otel-config
          Name: OtelCollector
          PortMappings:
            - ContainerPort: 4317
              Protocol: tcp
            - ContainerPort: 4318
              Protocol: tcp
            - ContainerPort: 13133
              Protocol: tcp
          User: '0'
      Cpu: '1024'
      ExecutionRoleArn: !GetAtt 'ExecRole.Arn'
      Family: otel-gateway-task
      Memory: '2048'
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      RuntimePlatform:
        CpuArchitecture: ARM64
        OperatingSystemFamily: LINUX
      TaskRoleArn: !GetAtt 'TaskRole.Arn'
      Volumes:
        - Name: scratch
        - EFSVolumeConfiguration:
            AuthorizationConfig:
              AccessPointId: !Ref 'OtelConfigAccessPoint'
              IAM: ENABLED
            FilesystemId: !ImportValue
              Fn::Sub:
                - ${CommonInfraStackName}-EfsId
                - CommonInfraStackName: !Ref 'CommonInfraStackName'
            TransitEncryption: ENABLED
          Name: otel-config
    Type: AWS::ECS::TaskDefinition
  TaskRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: '2012-10-17'
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:DeleteObject
                  - s3:ListBucket
                Effect: Allow
                Resource:
                  - !Sub
                    - arn:aws:s3:::${BucketName}
                    - BucketName: !ImportValue
                        Fn::Sub:
                          - ${CommonInfraStackName}-BucketName
                          - CommonInfraStackName: !Ref 'CommonInfraStackName'
                  - !Sub
                    - arn:aws:s3:::${BucketName}/*
                    - BucketName: !ImportValue
                        Fn::Sub:
                          - ${CommonInfraStackName}-BucketName
                          - CommonInfraStackName: !Ref 'CommonInfraStackName'
              - Action:
                  - elasticfilesystem:ClientMount
                  - elasticfilesystem:ClientWrite
                  - elasticfilesystem:ClientRootAccess
                  - elasticfilesystem:DescribeFileSystems
                  - elasticfilesystem:DescribeMountTargets
                  - elasticfilesystem:DescribeAccessPoints
                Effect: Allow
                Resource: '*'
            Version: '2012-10-17'
          PolicyName: S3Access
      RoleName: !Sub '${AWS::StackName}-task-role'
    Type: AWS::IAM::Role
  TaskSecurityGroup:
    Properties:
      GroupDescription: Security group for OTEL collector tasks
      SecurityGroupIngress:
        - Description: OTEL gRPC from ALB
          FromPort: 4317
          IpProtocol: tcp
          SourceSecurityGroupId: !Ref 'AlbSecurityGroup'
          ToPort: 4317
        - Description: OTEL HTTP from ALB
          FromPort: 4318
          IpProtocol: tcp
          SourceSecurityGroupId: !Ref 'AlbSecurityGroup'
          ToPort: 4318
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-task-sg'
      VpcId: !ImportValue
        Fn::Sub:
          - ${CommonInfraStackName}-VpcId
          - CommonInfraStackName: !Ref 'CommonInfraStackName'
    Type: AWS::EC2::SecurityGroup

