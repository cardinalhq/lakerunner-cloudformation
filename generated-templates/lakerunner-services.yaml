Conditions:
  EnableOtlp: !Not
    - !Equals
      - !Ref 'OtelEndpoint'
      - ''
  IsInternetFacing: !Equals
    - !Ref 'AlbScheme'
    - internet-facing
Description: 'Lakerunner Services: ECS services, task definitions, IAM roles, and ALB integration'
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Infrastructure
        Parameters:
          - CommonInfraStackName
          - AlbScheme
      - Label:
          default: MSK Configuration
        Parameters:
          - MSKBrokers
      - Label:
          default: Container Images
        Parameters:
          - GoServicesImage
      - Label:
          default: Telemetry
        Parameters:
          - OtelEndpoint
    ParameterLabels:
      AlbScheme:
        default: ALB Scheme
      CommonInfraStackName:
        default: Common Infra Stack Name
      GoServicesImage:
        default: Go Services Image
      MSKBrokers:
        default: MSK Broker Endpoints
      OtelEndpoint:
        default: OTEL Collector Endpoint
Outputs:
  AlbArn:
    Export:
      Name: !Sub '${AWS::StackName}-AlbArn'
    Value: !Ref 'Alb'
  AlbDNS:
    Export:
      Name: !Sub '${AWS::StackName}-AlbDNS'
    Value: !GetAtt 'Alb.DNSName'
  ExecutionRoleArn:
    Export:
      Name: !Sub '${AWS::StackName}-ExecutionRoleArn'
    Value: !GetAtt 'ExecRole.Arn'
  ServiceLakerunnerBoxerCommonArn:
    Export:
      Name: !Sub '${AWS::StackName}-lakerunner-boxer-common-ServiceArn'
    Value: !Ref 'ServiceLakerunnerBoxerCommon'
  ServiceLakerunnerCompactLogsArn:
    Export:
      Name: !Sub '${AWS::StackName}-lakerunner-compact-logs-ServiceArn'
    Value: !Ref 'ServiceLakerunnerCompactLogs'
  ServiceLakerunnerCompactMetricsArn:
    Export:
      Name: !Sub '${AWS::StackName}-lakerunner-compact-metrics-ServiceArn'
    Value: !Ref 'ServiceLakerunnerCompactMetrics'
  ServiceLakerunnerIngestLogsArn:
    Export:
      Name: !Sub '${AWS::StackName}-lakerunner-ingest-logs-ServiceArn'
    Value: !Ref 'ServiceLakerunnerIngestLogs'
  ServiceLakerunnerIngestMetricsArn:
    Export:
      Name: !Sub '${AWS::StackName}-lakerunner-ingest-metrics-ServiceArn'
    Value: !Ref 'ServiceLakerunnerIngestMetrics'
  ServiceLakerunnerPubsubSqsArn:
    Export:
      Name: !Sub '${AWS::StackName}-lakerunner-pubsub-sqs-ServiceArn'
    Value: !Ref 'ServiceLakerunnerPubsubSqs'
  ServiceLakerunnerQueryApiArn:
    Export:
      Name: !Sub '${AWS::StackName}-lakerunner-query-api-ServiceArn'
    Value: !Ref 'ServiceLakerunnerQueryApi'
  ServiceLakerunnerQueryWorkerArn:
    Export:
      Name: !Sub '${AWS::StackName}-lakerunner-query-worker-ServiceArn'
    Value: !Ref 'ServiceLakerunnerQueryWorker'
  ServiceLakerunnerRollupMetricsArn:
    Export:
      Name: !Sub '${AWS::StackName}-lakerunner-rollup-metrics-ServiceArn'
    Value: !Ref 'ServiceLakerunnerRollupMetrics'
  ServiceLakerunnerSweeperArn:
    Export:
      Name: !Sub '${AWS::StackName}-lakerunner-sweeper-ServiceArn'
    Value: !Ref 'ServiceLakerunnerSweeper'
  TaskRoleArn:
    Export:
      Name: !Sub '${AWS::StackName}-TaskRoleArn'
    Value: !GetAtt 'TaskRole.Arn'
  Tg7101Arn:
    Export:
      Name: !Sub '${AWS::StackName}-Tg7101Arn'
    Value: !Ref 'Tg7101'
Parameters:
  AlbScheme:
    AllowedValues:
      - internet-facing
      - internal
    Default: internal
    Description: 'Load balancer scheme: ''internet-facing'' for external access or ''internal'' for internal access only.'
    Type: String
  CommonInfraStackName:
    Description: 'REQUIRED: Name of the CommonInfra stack to import infrastructure values from.'
    Type: String
  GoServicesImage:
    Default: public.ecr.aws/cardinalhq.io/lakerunner:v1.4.4
    Description: Container image for all Go services (pubsub, ingest, compact, query-api, query-worker, etc.)
    Type: String
  MSKBrokers:
    Default: ''
    Description: 'REQUIRED: Comma-separated list of MSK broker endpoints (hostname:port)'
    Type: String
  OtelEndpoint:
    Default: ''
    Description: 'OPTIONAL: OTEL collector HTTP endpoint URL (e.g., http://collector-dns:4318). Leave blank to disable OTLP telemetry export.'
    Type: String
Resources:
  Alb:
    Properties:
      Scheme: !Ref 'AlbScheme'
      SecurityGroups:
        - !Ref 'AlbSecurityGroup'
      Subnets: !If
        - IsInternetFacing
        - !Split
          - ','
          - !ImportValue
            Fn::Sub:
              - ${CommonInfraStackName}-PublicSubnets
              - CommonInfraStackName: !Ref 'CommonInfraStackName'
        - !Split
          - ','
          - !ImportValue
            Fn::Sub:
              - ${CommonInfraStackName}-PrivateSubnets
              - CommonInfraStackName: !Ref 'CommonInfraStackName'
      Type: application
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
  Alb7101Open:
    Properties:
      CidrIp: '0.0.0.0/0'
      Description: HTTP 7101
      FromPort: 7101
      GroupId: !Ref 'AlbSecurityGroup'
      IpProtocol: tcp
      ToPort: 7101
    Type: AWS::EC2::SecurityGroupIngress
  AlbSecurityGroup:
    Properties:
      GroupDescription: Security group for ALB
      SecurityGroupEgress:
        - CidrIp: '0.0.0.0/0'
          Description: Allow all outbound
          IpProtocol: '-1'
      VpcId: !ImportValue
        Fn::Sub:
          - ${CommonInfraStackName}-VpcId
          - CommonInfraStackName: !Ref 'CommonInfraStackName'
    Type: AWS::EC2::SecurityGroup
  ExecRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: '2012-10-17'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - ssm:GetParameter
                  - ssm:GetParameters
                Effect: Allow
                Resource:
                  - !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/lakerunner/*'
                  - !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${AWS::StackName}-*'
              - Action:
                  - ssmmessages:CreateControlChannel
                  - ssmmessages:CreateDataChannel
                  - ssmmessages:OpenControlChannel
                  - ssmmessages:OpenDataChannel
                Effect: Allow
                Resource: '*'
              - Action:
                  - secretsmanager:GetSecretValue
                Effect: Allow
                Resource:
                  - !Sub
                    - ${SecretArn}*
                    - SecretArn: !ImportValue
                        Fn::Sub:
                          - ${CommonInfraStackName}-DbSecretArn
                          - CommonInfraStackName: !Ref 'CommonInfraStackName'
                  - !Sub
                    - ${SecretArn}*
                    - SecretArn: !ImportValue
                        Fn::Sub:
                          - ${CommonInfraStackName}-MSKCredentialsArn
                          - CommonInfraStackName: !Ref 'CommonInfraStackName'
                  - !Sub 'arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:${AWS::StackName}-*'
              - Action:
                  - kms:Decrypt
                  - kms:DescribeKey
                Effect: Allow
                Resource: !ImportValue
                  Fn::Sub:
                    - ${CommonInfraStackName}-MSKSecretsKeyArn
                    - CommonInfraStackName: !Ref 'CommonInfraStackName'
            Version: '2012-10-17'
          PolicyName: SSMParameterAccess
      RoleName: !Sub '${AWS::StackName}-exec-role'
    Type: AWS::IAM::Role
  Listener7101:
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref 'Tg7101'
          Type: forward
      LoadBalancerArn: !Ref 'Alb'
      Port: '7101'
      Protocol: HTTP
    Type: AWS::ElasticLoadBalancingV2::Listener
  LogGroupLakerunnerBoxerCommon:
    Properties:
      LogGroupName: !Sub '/ecs/lakerunner-boxer-common'
      RetentionInDays: 14
    Type: AWS::Logs::LogGroup
  LogGroupLakerunnerCompactLogs:
    Properties:
      LogGroupName: !Sub '/ecs/lakerunner-compact-logs'
      RetentionInDays: 14
    Type: AWS::Logs::LogGroup
  LogGroupLakerunnerCompactMetrics:
    Properties:
      LogGroupName: !Sub '/ecs/lakerunner-compact-metrics'
      RetentionInDays: 14
    Type: AWS::Logs::LogGroup
  LogGroupLakerunnerIngestLogs:
    Properties:
      LogGroupName: !Sub '/ecs/lakerunner-ingest-logs'
      RetentionInDays: 14
    Type: AWS::Logs::LogGroup
  LogGroupLakerunnerIngestMetrics:
    Properties:
      LogGroupName: !Sub '/ecs/lakerunner-ingest-metrics'
      RetentionInDays: 14
    Type: AWS::Logs::LogGroup
  LogGroupLakerunnerPubsubSqs:
    Properties:
      LogGroupName: !Sub '/ecs/lakerunner-pubsub-sqs'
      RetentionInDays: 14
    Type: AWS::Logs::LogGroup
  LogGroupLakerunnerQueryApi:
    Properties:
      LogGroupName: !Sub '/ecs/lakerunner-query-api'
      RetentionInDays: 14
    Type: AWS::Logs::LogGroup
  LogGroupLakerunnerQueryWorker:
    Properties:
      LogGroupName: !Sub '/ecs/lakerunner-query-worker'
      RetentionInDays: 14
    Type: AWS::Logs::LogGroup
  LogGroupLakerunnerRollupMetrics:
    Properties:
      LogGroupName: !Sub '/ecs/lakerunner-rollup-metrics'
      RetentionInDays: 14
    Type: AWS::Logs::LogGroup
  LogGroupLakerunnerSweeper:
    Properties:
      LogGroupName: !Sub '/ecs/lakerunner-sweeper'
      RetentionInDays: 14
    Type: AWS::Logs::LogGroup
  QueryApiTaskRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: '2012-10-17'
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:DeleteObject
                  - s3:ListBucket
                Effect: Allow
                Resource:
                  - !ImportValue
                    Fn::Sub:
                      - ${CommonInfraStackName}-BucketArn
                      - CommonInfraStackName: !Ref 'CommonInfraStackName'
                  - !Sub
                    - ${BucketArn}/*
                    - BucketArn: !ImportValue
                        Fn::Sub:
                          - ${CommonInfraStackName}-BucketArn
                          - CommonInfraStackName: !Ref 'CommonInfraStackName'
              - Action:
                  - secretsmanager:GetSecretValue
                Effect: Allow
                Resource:
                  - !Sub
                    - ${SecretArn}*
                    - SecretArn: !ImportValue
                        Fn::Sub:
                          - ${CommonInfraStackName}-DbSecretArn
                          - CommonInfraStackName: !Ref 'CommonInfraStackName'
                  - !Sub
                    - ${SecretArn}*
                    - SecretArn: !ImportValue
                        Fn::Sub:
                          - ${CommonInfraStackName}-MSKCredentialsArn
                          - CommonInfraStackName: !Ref 'CommonInfraStackName'
                  - !Sub 'arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:${AWS::StackName}-*'
              - Action:
                  - kms:Decrypt
                  - kms:DescribeKey
                Effect: Allow
                Resource: !ImportValue
                  Fn::Sub:
                    - ${CommonInfraStackName}-MSKSecretsKeyArn
                    - CommonInfraStackName: !Ref 'CommonInfraStackName'
              - Action:
                  - ecs:ListServices
                  - ecs:DescribeServices
                  - ecs:ListTasks
                  - ecs:DescribeTasks
                Effect: Allow
                Resource: '*'
              - Action:
                  - elasticfilesystem:ClientMount
                  - elasticfilesystem:ClientWrite
                  - elasticfilesystem:ClientRootAccess
                  - elasticfilesystem:DescribeFileSystems
                  - elasticfilesystem:DescribeMountTargets
                  - elasticfilesystem:DescribeAccessPoints
                Effect: Allow
                Resource: '*'
            Version: '2012-10-17'
          PolicyName: QueryApiAccess
      RoleName: !Sub '${AWS::StackName}-query-api-task-role'
    Type: AWS::IAM::Role
  QueryWorkerTaskRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: '2012-10-17'
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:DeleteObject
                  - s3:ListBucket
                Effect: Allow
                Resource:
                  - !ImportValue
                    Fn::Sub:
                      - ${CommonInfraStackName}-BucketArn
                      - CommonInfraStackName: !Ref 'CommonInfraStackName'
                  - !Sub
                    - ${BucketArn}/*
                    - BucketArn: !ImportValue
                        Fn::Sub:
                          - ${CommonInfraStackName}-BucketArn
                          - CommonInfraStackName: !Ref 'CommonInfraStackName'
              - Action:
                  - secretsmanager:GetSecretValue
                Effect: Allow
                Resource:
                  - !Sub
                    - ${SecretArn}*
                    - SecretArn: !ImportValue
                        Fn::Sub:
                          - ${CommonInfraStackName}-DbSecretArn
                          - CommonInfraStackName: !Ref 'CommonInfraStackName'
                  - !Sub
                    - ${SecretArn}*
                    - SecretArn: !ImportValue
                        Fn::Sub:
                          - ${CommonInfraStackName}-MSKCredentialsArn
                          - CommonInfraStackName: !Ref 'CommonInfraStackName'
                  - !Sub 'arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:${AWS::StackName}-*'
              - Action:
                  - kms:Decrypt
                  - kms:DescribeKey
                Effect: Allow
                Resource: !ImportValue
                  Fn::Sub:
                    - ${CommonInfraStackName}-MSKSecretsKeyArn
                    - CommonInfraStackName: !Ref 'CommonInfraStackName'
              - Action:
                  - elasticfilesystem:ClientMount
                  - elasticfilesystem:ClientWrite
                  - elasticfilesystem:ClientRootAccess
                  - elasticfilesystem:DescribeFileSystems
                  - elasticfilesystem:DescribeMountTargets
                  - elasticfilesystem:DescribeAccessPoints
                Effect: Allow
                Resource: '*'
            Version: '2012-10-17'
          PolicyName: QueryWorkerAccess
      RoleName: !Sub '${AWS::StackName}-query-worker-task-role'
    Type: AWS::IAM::Role
  ServiceLakerunnerBoxerCommon:
    Properties:
      Cluster: !ImportValue
        Fn::Sub:
          - ${CommonInfraStackName}-ClusterArn
          - CommonInfraStackName: !Ref 'CommonInfraStackName'
      DesiredCount: '1'
      EnableExecuteCommand: true
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          SecurityGroups:
            - !ImportValue
              Fn::Sub:
                - ${CommonInfraStackName}-TaskSGId
                - CommonInfraStackName: !Ref 'CommonInfraStackName'
          Subnets: !Split
            - ','
            - !ImportValue
              Fn::Sub:
                - ${CommonInfraStackName}-PrivateSubnets
                - CommonInfraStackName: !Ref 'CommonInfraStackName'
      ServiceName: lakerunner-boxer-common
      TaskDefinition: !Ref 'TaskDefLakerunnerBoxerCommon'
    Type: AWS::ECS::Service
  ServiceLakerunnerCompactLogs:
    Properties:
      Cluster: !ImportValue
        Fn::Sub:
          - ${CommonInfraStackName}-ClusterArn
          - CommonInfraStackName: !Ref 'CommonInfraStackName'
      DesiredCount: '2'
      EnableExecuteCommand: true
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          SecurityGroups:
            - !ImportValue
              Fn::Sub:
                - ${CommonInfraStackName}-TaskSGId
                - CommonInfraStackName: !Ref 'CommonInfraStackName'
          Subnets: !Split
            - ','
            - !ImportValue
              Fn::Sub:
                - ${CommonInfraStackName}-PrivateSubnets
                - CommonInfraStackName: !Ref 'CommonInfraStackName'
      ServiceName: lakerunner-compact-logs
      TaskDefinition: !Ref 'TaskDefLakerunnerCompactLogs'
    Type: AWS::ECS::Service
  ServiceLakerunnerCompactMetrics:
    Properties:
      Cluster: !ImportValue
        Fn::Sub:
          - ${CommonInfraStackName}-ClusterArn
          - CommonInfraStackName: !Ref 'CommonInfraStackName'
      DesiredCount: '2'
      EnableExecuteCommand: true
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          SecurityGroups:
            - !ImportValue
              Fn::Sub:
                - ${CommonInfraStackName}-TaskSGId
                - CommonInfraStackName: !Ref 'CommonInfraStackName'
          Subnets: !Split
            - ','
            - !ImportValue
              Fn::Sub:
                - ${CommonInfraStackName}-PrivateSubnets
                - CommonInfraStackName: !Ref 'CommonInfraStackName'
      ServiceName: lakerunner-compact-metrics
      TaskDefinition: !Ref 'TaskDefLakerunnerCompactMetrics'
    Type: AWS::ECS::Service
  ServiceLakerunnerIngestLogs:
    Properties:
      Cluster: !ImportValue
        Fn::Sub:
          - ${CommonInfraStackName}-ClusterArn
          - CommonInfraStackName: !Ref 'CommonInfraStackName'
      DesiredCount: '2'
      EnableExecuteCommand: true
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          SecurityGroups:
            - !ImportValue
              Fn::Sub:
                - ${CommonInfraStackName}-TaskSGId
                - CommonInfraStackName: !Ref 'CommonInfraStackName'
          Subnets: !Split
            - ','
            - !ImportValue
              Fn::Sub:
                - ${CommonInfraStackName}-PrivateSubnets
                - CommonInfraStackName: !Ref 'CommonInfraStackName'
      ServiceName: lakerunner-ingest-logs
      TaskDefinition: !Ref 'TaskDefLakerunnerIngestLogs'
    Type: AWS::ECS::Service
  ServiceLakerunnerIngestMetrics:
    Properties:
      Cluster: !ImportValue
        Fn::Sub:
          - ${CommonInfraStackName}-ClusterArn
          - CommonInfraStackName: !Ref 'CommonInfraStackName'
      DesiredCount: '1'
      EnableExecuteCommand: true
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          SecurityGroups:
            - !ImportValue
              Fn::Sub:
                - ${CommonInfraStackName}-TaskSGId
                - CommonInfraStackName: !Ref 'CommonInfraStackName'
          Subnets: !Split
            - ','
            - !ImportValue
              Fn::Sub:
                - ${CommonInfraStackName}-PrivateSubnets
                - CommonInfraStackName: !Ref 'CommonInfraStackName'
      ServiceName: lakerunner-ingest-metrics
      TaskDefinition: !Ref 'TaskDefLakerunnerIngestMetrics'
    Type: AWS::ECS::Service
  ServiceLakerunnerPubsubSqs:
    Properties:
      Cluster: !ImportValue
        Fn::Sub:
          - ${CommonInfraStackName}-ClusterArn
          - CommonInfraStackName: !Ref 'CommonInfraStackName'
      DesiredCount: '1'
      EnableExecuteCommand: true
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          SecurityGroups:
            - !ImportValue
              Fn::Sub:
                - ${CommonInfraStackName}-TaskSGId
                - CommonInfraStackName: !Ref 'CommonInfraStackName'
          Subnets: !Split
            - ','
            - !ImportValue
              Fn::Sub:
                - ${CommonInfraStackName}-PrivateSubnets
                - CommonInfraStackName: !Ref 'CommonInfraStackName'
      ServiceName: lakerunner-pubsub-sqs
      TaskDefinition: !Ref 'TaskDefLakerunnerPubsubSqs'
    Type: AWS::ECS::Service
  ServiceLakerunnerQueryApi:
    DependsOn:
      - Listener7101
    Properties:
      Cluster: !ImportValue
        Fn::Sub:
          - ${CommonInfraStackName}-ClusterArn
          - CommonInfraStackName: !Ref 'CommonInfraStackName'
      DesiredCount: '1'
      EnableExecuteCommand: true
      LaunchType: FARGATE
      LoadBalancers:
        - ContainerName: AppContainer
          ContainerPort: 8080
          TargetGroupArn: !Ref 'Tg7101'
      NetworkConfiguration:
        AwsvpcConfiguration:
          SecurityGroups:
            - !ImportValue
              Fn::Sub:
                - ${CommonInfraStackName}-TaskSGId
                - CommonInfraStackName: !Ref 'CommonInfraStackName'
          Subnets: !Split
            - ','
            - !ImportValue
              Fn::Sub:
                - ${CommonInfraStackName}-PrivateSubnets
                - CommonInfraStackName: !Ref 'CommonInfraStackName'
      ServiceName: lakerunner-query-api
      TaskDefinition: !Ref 'TaskDefLakerunnerQueryApi'
    Type: AWS::ECS::Service
  ServiceLakerunnerQueryWorker:
    Properties:
      Cluster: !ImportValue
        Fn::Sub:
          - ${CommonInfraStackName}-ClusterArn
          - CommonInfraStackName: !Ref 'CommonInfraStackName'
      DesiredCount: '2'
      EnableExecuteCommand: true
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          SecurityGroups:
            - !ImportValue
              Fn::Sub:
                - ${CommonInfraStackName}-TaskSGId
                - CommonInfraStackName: !Ref 'CommonInfraStackName'
          Subnets: !Split
            - ','
            - !ImportValue
              Fn::Sub:
                - ${CommonInfraStackName}-PrivateSubnets
                - CommonInfraStackName: !Ref 'CommonInfraStackName'
      ServiceName: lakerunner-query-worker
      TaskDefinition: !Ref 'TaskDefLakerunnerQueryWorker'
    Type: AWS::ECS::Service
  ServiceLakerunnerRollupMetrics:
    Properties:
      Cluster: !ImportValue
        Fn::Sub:
          - ${CommonInfraStackName}-ClusterArn
          - CommonInfraStackName: !Ref 'CommonInfraStackName'
      DesiredCount: '2'
      EnableExecuteCommand: true
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          SecurityGroups:
            - !ImportValue
              Fn::Sub:
                - ${CommonInfraStackName}-TaskSGId
                - CommonInfraStackName: !Ref 'CommonInfraStackName'
          Subnets: !Split
            - ','
            - !ImportValue
              Fn::Sub:
                - ${CommonInfraStackName}-PrivateSubnets
                - CommonInfraStackName: !Ref 'CommonInfraStackName'
      ServiceName: lakerunner-rollup-metrics
      TaskDefinition: !Ref 'TaskDefLakerunnerRollupMetrics'
    Type: AWS::ECS::Service
  ServiceLakerunnerSweeper:
    Properties:
      Cluster: !ImportValue
        Fn::Sub:
          - ${CommonInfraStackName}-ClusterArn
          - CommonInfraStackName: !Ref 'CommonInfraStackName'
      DesiredCount: '1'
      EnableExecuteCommand: true
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          SecurityGroups:
            - !ImportValue
              Fn::Sub:
                - ${CommonInfraStackName}-TaskSGId
                - CommonInfraStackName: !Ref 'CommonInfraStackName'
          Subnets: !Split
            - ','
            - !ImportValue
              Fn::Sub:
                - ${CommonInfraStackName}-PrivateSubnets
                - CommonInfraStackName: !Ref 'CommonInfraStackName'
      ServiceName: lakerunner-sweeper
      TaskDefinition: !Ref 'TaskDefLakerunnerSweeper'
    Type: AWS::ECS::Service
  TaskDefLakerunnerBoxerCommon:
    Properties:
      ContainerDefinitions:
        - Command:
            - /app/bin/lakerunner
            - boxer
            - --all
          Environment:
            - Name: OTEL_SERVICE_NAME
              Value: lakerunner-boxer-common
            - Name: TMPDIR
              Value: /scratch
            - Name: HOME
              Value: /scratch
            - Name: STORAGE_PROFILE_FILE
              Value: env:STORAGE_PROFILES_ENV
            - Name: API_KEYS_FILE
              Value: env:API_KEYS_ENV
            - Name: SQS_QUEUE_URL
              Value: !Sub 'https://sqs.${AWS::Region}.amazonaws.com/${AWS::AccountId}/lakerunner-ingest-queue'
            - Name: SQS_REGION
              Value: !Ref 'AWS::Region'
            - Name: LRDB_HOST
              Value: !ImportValue
                Fn::Sub:
                  - ${CommonInfraStackName}-DbEndpoint
                  - CommonInfraStackName: !Ref 'CommonInfraStackName'
            - Name: LRDB_PORT
              Value: !ImportValue
                Fn::Sub:
                  - ${CommonInfraStackName}-DbPort
                  - CommonInfraStackName: !Ref 'CommonInfraStackName'
            - Name: LRDB_DBNAME
              Value: lakerunner
            - Name: LRDB_USER
              Value: lakerunner
            - Name: LRDB_SSLMODE
              Value: require
            - Name: CONFIGDB_HOST
              Value: !ImportValue
                Fn::Sub:
                  - ${CommonInfraStackName}-DbEndpoint
                  - CommonInfraStackName: !Ref 'CommonInfraStackName'
            - Name: CONFIGDB_PORT
              Value: !ImportValue
                Fn::Sub:
                  - ${CommonInfraStackName}-DbPort
                  - CommonInfraStackName: !Ref 'CommonInfraStackName'
            - Name: CONFIGDB_DBNAME
              Value: lakerunner
            - Name: CONFIGDB_USER
              Value: lakerunner
            - Name: CONFIGDB_SSLMODE
              Value: require
            - Name: LAKERUNNER_KAFKA_BROKERS
              Value: !Ref 'MSKBrokers'
            - Name: LAKERUNNER_KAFKA_TLS_ENABLED
              Value: 'true'
            - Name: LAKERUNNER_KAFKA_SASL_ENABLED
              Value: 'true'
            - Name: LAKERUNNER_KAFKA_SASL_MECHANISM
              Value: SCRAM-SHA-512
            - Name: OTEL_EXPORTER_OTLP_ENDPOINT
              Value: !If
                - EnableOtlp
                - !Ref 'OtelEndpoint'
                - !Ref 'AWS::NoValue'
            - Name: ENABLE_OTLP_TELEMETRY
              Value: !If
                - EnableOtlp
                - 'true'
                - !Ref 'AWS::NoValue'
          HealthCheck:
            Command:
              - /app/bin/lakerunner
              - sysinfo
            Interval: 30
            Retries: 3
            StartPeriod: 60
            Timeout: 5
          Image: !Ref 'GoServicesImage'
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref 'LogGroupLakerunnerBoxerCommon'
              awslogs-region: !Ref 'AWS::Region'
              awslogs-stream-prefix: lakerunner-boxer-common
          MountPoints:
            - ContainerPath: /scratch
              ReadOnly: false
              SourceVolume: scratch
          Name: AppContainer
          PortMappings: []
          Secrets:
            - Name: STORAGE_PROFILES_ENV
              ValueFrom: !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/lakerunner/storage_profiles'
            - Name: API_KEYS_ENV
              ValueFrom: !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/lakerunner/api_keys'
            - Name: LRDB_PASSWORD
              ValueFrom: !Sub
                - '${SecretArn}:password::'
                - SecretArn: !ImportValue
                    Fn::Sub:
                      - ${CommonInfraStackName}-DbSecretArn
                      - CommonInfraStackName: !Ref 'CommonInfraStackName'
            - Name: CONFIGDB_PASSWORD
              ValueFrom: !Sub
                - '${SecretArn}:password::'
                - SecretArn: !ImportValue
                    Fn::Sub:
                      - ${CommonInfraStackName}-DbSecretArn
                      - CommonInfraStackName: !Ref 'CommonInfraStackName'
            - Name: LAKERUNNER_KAFKA_SASL_USERNAME
              ValueFrom: !Sub
                - '${SecretArn}:username::'
                - SecretArn: !ImportValue
                    Fn::Sub:
                      - ${CommonInfraStackName}-MSKCredentialsArn
                      - CommonInfraStackName: !Ref 'CommonInfraStackName'
            - Name: LAKERUNNER_KAFKA_SASL_PASSWORD
              ValueFrom: !Sub
                - '${SecretArn}:password::'
                - SecretArn: !ImportValue
                    Fn::Sub:
                      - ${CommonInfraStackName}-MSKCredentialsArn
                      - CommonInfraStackName: !Ref 'CommonInfraStackName'
          User: '0'
      Cpu: '256'
      ExecutionRoleArn: !GetAtt 'ExecRole.Arn'
      Family: lakerunner-boxer-common-task
      Memory: '512'
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      RuntimePlatform:
        CpuArchitecture: ARM64
        OperatingSystemFamily: LINUX
      TaskRoleArn: !GetAtt 'TaskRole.Arn'
      Volumes:
        - Name: scratch
    Type: AWS::ECS::TaskDefinition
  TaskDefLakerunnerCompactLogs:
    Properties:
      ContainerDefinitions:
        - Command:
            - /app/bin/lakerunner
            - compact-logs
          Environment:
            - Name: OTEL_SERVICE_NAME
              Value: lakerunner-compact-logs
            - Name: TMPDIR
              Value: /scratch
            - Name: HOME
              Value: /scratch
            - Name: STORAGE_PROFILE_FILE
              Value: env:STORAGE_PROFILES_ENV
            - Name: API_KEYS_FILE
              Value: env:API_KEYS_ENV
            - Name: SQS_QUEUE_URL
              Value: !Sub 'https://sqs.${AWS::Region}.amazonaws.com/${AWS::AccountId}/lakerunner-ingest-queue'
            - Name: SQS_REGION
              Value: !Ref 'AWS::Region'
            - Name: LRDB_HOST
              Value: !ImportValue
                Fn::Sub:
                  - ${CommonInfraStackName}-DbEndpoint
                  - CommonInfraStackName: !Ref 'CommonInfraStackName'
            - Name: LRDB_PORT
              Value: !ImportValue
                Fn::Sub:
                  - ${CommonInfraStackName}-DbPort
                  - CommonInfraStackName: !Ref 'CommonInfraStackName'
            - Name: LRDB_DBNAME
              Value: lakerunner
            - Name: LRDB_USER
              Value: lakerunner
            - Name: LRDB_SSLMODE
              Value: require
            - Name: CONFIGDB_HOST
              Value: !ImportValue
                Fn::Sub:
                  - ${CommonInfraStackName}-DbEndpoint
                  - CommonInfraStackName: !Ref 'CommonInfraStackName'
            - Name: CONFIGDB_PORT
              Value: !ImportValue
                Fn::Sub:
                  - ${CommonInfraStackName}-DbPort
                  - CommonInfraStackName: !Ref 'CommonInfraStackName'
            - Name: CONFIGDB_DBNAME
              Value: lakerunner
            - Name: CONFIGDB_USER
              Value: lakerunner
            - Name: CONFIGDB_SSLMODE
              Value: require
            - Name: LAKERUNNER_KAFKA_BROKERS
              Value: !Ref 'MSKBrokers'
            - Name: LAKERUNNER_KAFKA_TLS_ENABLED
              Value: 'true'
            - Name: LAKERUNNER_KAFKA_SASL_ENABLED
              Value: 'true'
            - Name: LAKERUNNER_KAFKA_SASL_MECHANISM
              Value: SCRAM-SHA-512
            - Name: OTEL_EXPORTER_OTLP_ENDPOINT
              Value: !If
                - EnableOtlp
                - !Ref 'OtelEndpoint'
                - !Ref 'AWS::NoValue'
            - Name: ENABLE_OTLP_TELEMETRY
              Value: !If
                - EnableOtlp
                - 'true'
                - !Ref 'AWS::NoValue'
          HealthCheck:
            Command:
              - /app/bin/lakerunner
              - sysinfo
            Interval: 30
            Retries: 3
            StartPeriod: 60
            Timeout: 5
          Image: !Ref 'GoServicesImage'
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref 'LogGroupLakerunnerCompactLogs'
              awslogs-region: !Ref 'AWS::Region'
              awslogs-stream-prefix: lakerunner-compact-logs
          MountPoints:
            - ContainerPath: /scratch
              ReadOnly: false
              SourceVolume: scratch
          Name: AppContainer
          PortMappings: []
          Secrets:
            - Name: STORAGE_PROFILES_ENV
              ValueFrom: !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/lakerunner/storage_profiles'
            - Name: API_KEYS_ENV
              ValueFrom: !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/lakerunner/api_keys'
            - Name: LRDB_PASSWORD
              ValueFrom: !Sub
                - '${SecretArn}:password::'
                - SecretArn: !ImportValue
                    Fn::Sub:
                      - ${CommonInfraStackName}-DbSecretArn
                      - CommonInfraStackName: !Ref 'CommonInfraStackName'
            - Name: CONFIGDB_PASSWORD
              ValueFrom: !Sub
                - '${SecretArn}:password::'
                - SecretArn: !ImportValue
                    Fn::Sub:
                      - ${CommonInfraStackName}-DbSecretArn
                      - CommonInfraStackName: !Ref 'CommonInfraStackName'
            - Name: LAKERUNNER_KAFKA_SASL_USERNAME
              ValueFrom: !Sub
                - '${SecretArn}:username::'
                - SecretArn: !ImportValue
                    Fn::Sub:
                      - ${CommonInfraStackName}-MSKCredentialsArn
                      - CommonInfraStackName: !Ref 'CommonInfraStackName'
            - Name: LAKERUNNER_KAFKA_SASL_PASSWORD
              ValueFrom: !Sub
                - '${SecretArn}:password::'
                - SecretArn: !ImportValue
                    Fn::Sub:
                      - ${CommonInfraStackName}-MSKCredentialsArn
                      - CommonInfraStackName: !Ref 'CommonInfraStackName'
          User: '0'
      Cpu: '1024'
      ExecutionRoleArn: !GetAtt 'ExecRole.Arn'
      Family: lakerunner-compact-logs-task
      Memory: '2048'
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      RuntimePlatform:
        CpuArchitecture: ARM64
        OperatingSystemFamily: LINUX
      TaskRoleArn: !GetAtt 'TaskRole.Arn'
      Volumes:
        - Name: scratch
    Type: AWS::ECS::TaskDefinition
  TaskDefLakerunnerCompactMetrics:
    Properties:
      ContainerDefinitions:
        - Command:
            - /app/bin/lakerunner
            - compact-metrics
          Environment:
            - Name: OTEL_SERVICE_NAME
              Value: lakerunner-compact-metrics
            - Name: TMPDIR
              Value: /scratch
            - Name: HOME
              Value: /scratch
            - Name: STORAGE_PROFILE_FILE
              Value: env:STORAGE_PROFILES_ENV
            - Name: API_KEYS_FILE
              Value: env:API_KEYS_ENV
            - Name: SQS_QUEUE_URL
              Value: !Sub 'https://sqs.${AWS::Region}.amazonaws.com/${AWS::AccountId}/lakerunner-ingest-queue'
            - Name: SQS_REGION
              Value: !Ref 'AWS::Region'
            - Name: LRDB_HOST
              Value: !ImportValue
                Fn::Sub:
                  - ${CommonInfraStackName}-DbEndpoint
                  - CommonInfraStackName: !Ref 'CommonInfraStackName'
            - Name: LRDB_PORT
              Value: !ImportValue
                Fn::Sub:
                  - ${CommonInfraStackName}-DbPort
                  - CommonInfraStackName: !Ref 'CommonInfraStackName'
            - Name: LRDB_DBNAME
              Value: lakerunner
            - Name: LRDB_USER
              Value: lakerunner
            - Name: LRDB_SSLMODE
              Value: require
            - Name: CONFIGDB_HOST
              Value: !ImportValue
                Fn::Sub:
                  - ${CommonInfraStackName}-DbEndpoint
                  - CommonInfraStackName: !Ref 'CommonInfraStackName'
            - Name: CONFIGDB_PORT
              Value: !ImportValue
                Fn::Sub:
                  - ${CommonInfraStackName}-DbPort
                  - CommonInfraStackName: !Ref 'CommonInfraStackName'
            - Name: CONFIGDB_DBNAME
              Value: lakerunner
            - Name: CONFIGDB_USER
              Value: lakerunner
            - Name: CONFIGDB_SSLMODE
              Value: require
            - Name: LAKERUNNER_KAFKA_BROKERS
              Value: !Ref 'MSKBrokers'
            - Name: LAKERUNNER_KAFKA_TLS_ENABLED
              Value: 'true'
            - Name: LAKERUNNER_KAFKA_SASL_ENABLED
              Value: 'true'
            - Name: LAKERUNNER_KAFKA_SASL_MECHANISM
              Value: SCRAM-SHA-512
            - Name: OTEL_EXPORTER_OTLP_ENDPOINT
              Value: !If
                - EnableOtlp
                - !Ref 'OtelEndpoint'
                - !Ref 'AWS::NoValue'
            - Name: ENABLE_OTLP_TELEMETRY
              Value: !If
                - EnableOtlp
                - 'true'
                - !Ref 'AWS::NoValue'
          HealthCheck:
            Command:
              - /app/bin/lakerunner
              - sysinfo
            Interval: 30
            Retries: 3
            StartPeriod: 60
            Timeout: 5
          Image: !Ref 'GoServicesImage'
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref 'LogGroupLakerunnerCompactMetrics'
              awslogs-region: !Ref 'AWS::Region'
              awslogs-stream-prefix: lakerunner-compact-metrics
          MountPoints:
            - ContainerPath: /scratch
              ReadOnly: false
              SourceVolume: scratch
          Name: AppContainer
          PortMappings: []
          Secrets:
            - Name: STORAGE_PROFILES_ENV
              ValueFrom: !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/lakerunner/storage_profiles'
            - Name: API_KEYS_ENV
              ValueFrom: !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/lakerunner/api_keys'
            - Name: LRDB_PASSWORD
              ValueFrom: !Sub
                - '${SecretArn}:password::'
                - SecretArn: !ImportValue
                    Fn::Sub:
                      - ${CommonInfraStackName}-DbSecretArn
                      - CommonInfraStackName: !Ref 'CommonInfraStackName'
            - Name: CONFIGDB_PASSWORD
              ValueFrom: !Sub
                - '${SecretArn}:password::'
                - SecretArn: !ImportValue
                    Fn::Sub:
                      - ${CommonInfraStackName}-DbSecretArn
                      - CommonInfraStackName: !Ref 'CommonInfraStackName'
            - Name: LAKERUNNER_KAFKA_SASL_USERNAME
              ValueFrom: !Sub
                - '${SecretArn}:username::'
                - SecretArn: !ImportValue
                    Fn::Sub:
                      - ${CommonInfraStackName}-MSKCredentialsArn
                      - CommonInfraStackName: !Ref 'CommonInfraStackName'
            - Name: LAKERUNNER_KAFKA_SASL_PASSWORD
              ValueFrom: !Sub
                - '${SecretArn}:password::'
                - SecretArn: !ImportValue
                    Fn::Sub:
                      - ${CommonInfraStackName}-MSKCredentialsArn
                      - CommonInfraStackName: !Ref 'CommonInfraStackName'
          User: '0'
      Cpu: '1024'
      ExecutionRoleArn: !GetAtt 'ExecRole.Arn'
      Family: lakerunner-compact-metrics-task
      Memory: '2048'
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      RuntimePlatform:
        CpuArchitecture: ARM64
        OperatingSystemFamily: LINUX
      TaskRoleArn: !GetAtt 'TaskRole.Arn'
      Volumes:
        - Name: scratch
    Type: AWS::ECS::TaskDefinition
  TaskDefLakerunnerIngestLogs:
    Properties:
      ContainerDefinitions:
        - Command:
            - /app/bin/lakerunner
            - ingest-logs
          Environment:
            - Name: OTEL_SERVICE_NAME
              Value: lakerunner-ingest-logs
            - Name: TMPDIR
              Value: /scratch
            - Name: HOME
              Value: /scratch
            - Name: STORAGE_PROFILE_FILE
              Value: env:STORAGE_PROFILES_ENV
            - Name: API_KEYS_FILE
              Value: env:API_KEYS_ENV
            - Name: SQS_QUEUE_URL
              Value: !Sub 'https://sqs.${AWS::Region}.amazonaws.com/${AWS::AccountId}/lakerunner-ingest-queue'
            - Name: SQS_REGION
              Value: !Ref 'AWS::Region'
            - Name: LRDB_HOST
              Value: !ImportValue
                Fn::Sub:
                  - ${CommonInfraStackName}-DbEndpoint
                  - CommonInfraStackName: !Ref 'CommonInfraStackName'
            - Name: LRDB_PORT
              Value: !ImportValue
                Fn::Sub:
                  - ${CommonInfraStackName}-DbPort
                  - CommonInfraStackName: !Ref 'CommonInfraStackName'
            - Name: LRDB_DBNAME
              Value: lakerunner
            - Name: LRDB_USER
              Value: lakerunner
            - Name: LRDB_SSLMODE
              Value: require
            - Name: CONFIGDB_HOST
              Value: !ImportValue
                Fn::Sub:
                  - ${CommonInfraStackName}-DbEndpoint
                  - CommonInfraStackName: !Ref 'CommonInfraStackName'
            - Name: CONFIGDB_PORT
              Value: !ImportValue
                Fn::Sub:
                  - ${CommonInfraStackName}-DbPort
                  - CommonInfraStackName: !Ref 'CommonInfraStackName'
            - Name: CONFIGDB_DBNAME
              Value: lakerunner
            - Name: CONFIGDB_USER
              Value: lakerunner
            - Name: CONFIGDB_SSLMODE
              Value: require
            - Name: LAKERUNNER_KAFKA_BROKERS
              Value: !Ref 'MSKBrokers'
            - Name: LAKERUNNER_KAFKA_TLS_ENABLED
              Value: 'true'
            - Name: LAKERUNNER_KAFKA_SASL_ENABLED
              Value: 'true'
            - Name: LAKERUNNER_KAFKA_SASL_MECHANISM
              Value: SCRAM-SHA-512
            - Name: OTEL_EXPORTER_OTLP_ENDPOINT
              Value: !If
                - EnableOtlp
                - !Ref 'OtelEndpoint'
                - !Ref 'AWS::NoValue'
            - Name: ENABLE_OTLP_TELEMETRY
              Value: !If
                - EnableOtlp
                - 'true'
                - !Ref 'AWS::NoValue'
          HealthCheck:
            Command:
              - /app/bin/lakerunner
              - sysinfo
            Interval: 30
            Retries: 3
            StartPeriod: 60
            Timeout: 5
          Image: !Ref 'GoServicesImage'
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref 'LogGroupLakerunnerIngestLogs'
              awslogs-region: !Ref 'AWS::Region'
              awslogs-stream-prefix: lakerunner-ingest-logs
          MountPoints:
            - ContainerPath: /scratch
              ReadOnly: false
              SourceVolume: scratch
          Name: AppContainer
          PortMappings: []
          Secrets:
            - Name: STORAGE_PROFILES_ENV
              ValueFrom: !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/lakerunner/storage_profiles'
            - Name: API_KEYS_ENV
              ValueFrom: !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/lakerunner/api_keys'
            - Name: LRDB_PASSWORD
              ValueFrom: !Sub
                - '${SecretArn}:password::'
                - SecretArn: !ImportValue
                    Fn::Sub:
                      - ${CommonInfraStackName}-DbSecretArn
                      - CommonInfraStackName: !Ref 'CommonInfraStackName'
            - Name: CONFIGDB_PASSWORD
              ValueFrom: !Sub
                - '${SecretArn}:password::'
                - SecretArn: !ImportValue
                    Fn::Sub:
                      - ${CommonInfraStackName}-DbSecretArn
                      - CommonInfraStackName: !Ref 'CommonInfraStackName'
            - Name: LAKERUNNER_KAFKA_SASL_USERNAME
              ValueFrom: !Sub
                - '${SecretArn}:username::'
                - SecretArn: !ImportValue
                    Fn::Sub:
                      - ${CommonInfraStackName}-MSKCredentialsArn
                      - CommonInfraStackName: !Ref 'CommonInfraStackName'
            - Name: LAKERUNNER_KAFKA_SASL_PASSWORD
              ValueFrom: !Sub
                - '${SecretArn}:password::'
                - SecretArn: !ImportValue
                    Fn::Sub:
                      - ${CommonInfraStackName}-MSKCredentialsArn
                      - CommonInfraStackName: !Ref 'CommonInfraStackName'
          User: '0'
      Cpu: '1024'
      ExecutionRoleArn: !GetAtt 'ExecRole.Arn'
      Family: lakerunner-ingest-logs-task
      Memory: '2048'
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      RuntimePlatform:
        CpuArchitecture: ARM64
        OperatingSystemFamily: LINUX
      TaskRoleArn: !GetAtt 'TaskRole.Arn'
      Volumes:
        - Name: scratch
    Type: AWS::ECS::TaskDefinition
  TaskDefLakerunnerIngestMetrics:
    Properties:
      ContainerDefinitions:
        - Command:
            - /app/bin/lakerunner
            - ingest-metrics
          Environment:
            - Name: OTEL_SERVICE_NAME
              Value: lakerunner-ingest-metrics
            - Name: TMPDIR
              Value: /scratch
            - Name: HOME
              Value: /scratch
            - Name: STORAGE_PROFILE_FILE
              Value: env:STORAGE_PROFILES_ENV
            - Name: API_KEYS_FILE
              Value: env:API_KEYS_ENV
            - Name: SQS_QUEUE_URL
              Value: !Sub 'https://sqs.${AWS::Region}.amazonaws.com/${AWS::AccountId}/lakerunner-ingest-queue'
            - Name: SQS_REGION
              Value: !Ref 'AWS::Region'
            - Name: LRDB_HOST
              Value: !ImportValue
                Fn::Sub:
                  - ${CommonInfraStackName}-DbEndpoint
                  - CommonInfraStackName: !Ref 'CommonInfraStackName'
            - Name: LRDB_PORT
              Value: !ImportValue
                Fn::Sub:
                  - ${CommonInfraStackName}-DbPort
                  - CommonInfraStackName: !Ref 'CommonInfraStackName'
            - Name: LRDB_DBNAME
              Value: lakerunner
            - Name: LRDB_USER
              Value: lakerunner
            - Name: LRDB_SSLMODE
              Value: require
            - Name: CONFIGDB_HOST
              Value: !ImportValue
                Fn::Sub:
                  - ${CommonInfraStackName}-DbEndpoint
                  - CommonInfraStackName: !Ref 'CommonInfraStackName'
            - Name: CONFIGDB_PORT
              Value: !ImportValue
                Fn::Sub:
                  - ${CommonInfraStackName}-DbPort
                  - CommonInfraStackName: !Ref 'CommonInfraStackName'
            - Name: CONFIGDB_DBNAME
              Value: lakerunner
            - Name: CONFIGDB_USER
              Value: lakerunner
            - Name: CONFIGDB_SSLMODE
              Value: require
            - Name: LAKERUNNER_KAFKA_BROKERS
              Value: !Ref 'MSKBrokers'
            - Name: LAKERUNNER_KAFKA_TLS_ENABLED
              Value: 'true'
            - Name: LAKERUNNER_KAFKA_SASL_ENABLED
              Value: 'true'
            - Name: LAKERUNNER_KAFKA_SASL_MECHANISM
              Value: SCRAM-SHA-512
            - Name: OTEL_EXPORTER_OTLP_ENDPOINT
              Value: !If
                - EnableOtlp
                - !Ref 'OtelEndpoint'
                - !Ref 'AWS::NoValue'
            - Name: ENABLE_OTLP_TELEMETRY
              Value: !If
                - EnableOtlp
                - 'true'
                - !Ref 'AWS::NoValue'
          HealthCheck:
            Command:
              - /app/bin/lakerunner
              - sysinfo
            Interval: 30
            Retries: 3
            StartPeriod: 60
            Timeout: 5
          Image: !Ref 'GoServicesImage'
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref 'LogGroupLakerunnerIngestMetrics'
              awslogs-region: !Ref 'AWS::Region'
              awslogs-stream-prefix: lakerunner-ingest-metrics
          MountPoints:
            - ContainerPath: /scratch
              ReadOnly: false
              SourceVolume: scratch
          Name: AppContainer
          PortMappings: []
          Secrets:
            - Name: STORAGE_PROFILES_ENV
              ValueFrom: !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/lakerunner/storage_profiles'
            - Name: API_KEYS_ENV
              ValueFrom: !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/lakerunner/api_keys'
            - Name: LRDB_PASSWORD
              ValueFrom: !Sub
                - '${SecretArn}:password::'
                - SecretArn: !ImportValue
                    Fn::Sub:
                      - ${CommonInfraStackName}-DbSecretArn
                      - CommonInfraStackName: !Ref 'CommonInfraStackName'
            - Name: CONFIGDB_PASSWORD
              ValueFrom: !Sub
                - '${SecretArn}:password::'
                - SecretArn: !ImportValue
                    Fn::Sub:
                      - ${CommonInfraStackName}-DbSecretArn
                      - CommonInfraStackName: !Ref 'CommonInfraStackName'
            - Name: LAKERUNNER_KAFKA_SASL_USERNAME
              ValueFrom: !Sub
                - '${SecretArn}:username::'
                - SecretArn: !ImportValue
                    Fn::Sub:
                      - ${CommonInfraStackName}-MSKCredentialsArn
                      - CommonInfraStackName: !Ref 'CommonInfraStackName'
            - Name: LAKERUNNER_KAFKA_SASL_PASSWORD
              ValueFrom: !Sub
                - '${SecretArn}:password::'
                - SecretArn: !ImportValue
                    Fn::Sub:
                      - ${CommonInfraStackName}-MSKCredentialsArn
                      - CommonInfraStackName: !Ref 'CommonInfraStackName'
          User: '0'
      Cpu: '1024'
      ExecutionRoleArn: !GetAtt 'ExecRole.Arn'
      Family: lakerunner-ingest-metrics-task
      Memory: '2048'
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      RuntimePlatform:
        CpuArchitecture: ARM64
        OperatingSystemFamily: LINUX
      TaskRoleArn: !GetAtt 'TaskRole.Arn'
      Volumes:
        - Name: scratch
    Type: AWS::ECS::TaskDefinition
  TaskDefLakerunnerPubsubSqs:
    Properties:
      ContainerDefinitions:
        - Command:
            - /app/bin/lakerunner
            - pubsub
            - sqs
          Environment:
            - Name: OTEL_SERVICE_NAME
              Value: lakerunner-pubsub-sqs
            - Name: TMPDIR
              Value: /scratch
            - Name: HOME
              Value: /scratch
            - Name: STORAGE_PROFILE_FILE
              Value: env:STORAGE_PROFILES_ENV
            - Name: API_KEYS_FILE
              Value: env:API_KEYS_ENV
            - Name: SQS_QUEUE_URL
              Value: !Sub 'https://sqs.${AWS::Region}.amazonaws.com/${AWS::AccountId}/lakerunner-ingest-queue'
            - Name: SQS_REGION
              Value: !Ref 'AWS::Region'
            - Name: LRDB_HOST
              Value: !ImportValue
                Fn::Sub:
                  - ${CommonInfraStackName}-DbEndpoint
                  - CommonInfraStackName: !Ref 'CommonInfraStackName'
            - Name: LRDB_PORT
              Value: !ImportValue
                Fn::Sub:
                  - ${CommonInfraStackName}-DbPort
                  - CommonInfraStackName: !Ref 'CommonInfraStackName'
            - Name: LRDB_DBNAME
              Value: lakerunner
            - Name: LRDB_USER
              Value: lakerunner
            - Name: LRDB_SSLMODE
              Value: require
            - Name: CONFIGDB_HOST
              Value: !ImportValue
                Fn::Sub:
                  - ${CommonInfraStackName}-DbEndpoint
                  - CommonInfraStackName: !Ref 'CommonInfraStackName'
            - Name: CONFIGDB_PORT
              Value: !ImportValue
                Fn::Sub:
                  - ${CommonInfraStackName}-DbPort
                  - CommonInfraStackName: !Ref 'CommonInfraStackName'
            - Name: CONFIGDB_DBNAME
              Value: lakerunner
            - Name: CONFIGDB_USER
              Value: lakerunner
            - Name: CONFIGDB_SSLMODE
              Value: require
            - Name: LAKERUNNER_KAFKA_BROKERS
              Value: !Ref 'MSKBrokers'
            - Name: LAKERUNNER_KAFKA_TLS_ENABLED
              Value: 'true'
            - Name: LAKERUNNER_KAFKA_SASL_ENABLED
              Value: 'true'
            - Name: LAKERUNNER_KAFKA_SASL_MECHANISM
              Value: SCRAM-SHA-512
            - Name: OTEL_EXPORTER_OTLP_ENDPOINT
              Value: !If
                - EnableOtlp
                - !Ref 'OtelEndpoint'
                - !Ref 'AWS::NoValue'
            - Name: ENABLE_OTLP_TELEMETRY
              Value: !If
                - EnableOtlp
                - 'true'
                - !Ref 'AWS::NoValue'
          HealthCheck:
            Command:
              - /app/bin/lakerunner
              - sysinfo
            Interval: 30
            Retries: 3
            StartPeriod: 60
            Timeout: 5
          Image: !Ref 'GoServicesImage'
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref 'LogGroupLakerunnerPubsubSqs'
              awslogs-region: !Ref 'AWS::Region'
              awslogs-stream-prefix: lakerunner-pubsub-sqs
          MountPoints:
            - ContainerPath: /scratch
              ReadOnly: false
              SourceVolume: scratch
          Name: AppContainer
          PortMappings: []
          Secrets:
            - Name: STORAGE_PROFILES_ENV
              ValueFrom: !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/lakerunner/storage_profiles'
            - Name: API_KEYS_ENV
              ValueFrom: !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/lakerunner/api_keys'
            - Name: LRDB_PASSWORD
              ValueFrom: !Sub
                - '${SecretArn}:password::'
                - SecretArn: !ImportValue
                    Fn::Sub:
                      - ${CommonInfraStackName}-DbSecretArn
                      - CommonInfraStackName: !Ref 'CommonInfraStackName'
            - Name: CONFIGDB_PASSWORD
              ValueFrom: !Sub
                - '${SecretArn}:password::'
                - SecretArn: !ImportValue
                    Fn::Sub:
                      - ${CommonInfraStackName}-DbSecretArn
                      - CommonInfraStackName: !Ref 'CommonInfraStackName'
            - Name: LAKERUNNER_KAFKA_SASL_USERNAME
              ValueFrom: !Sub
                - '${SecretArn}:username::'
                - SecretArn: !ImportValue
                    Fn::Sub:
                      - ${CommonInfraStackName}-MSKCredentialsArn
                      - CommonInfraStackName: !Ref 'CommonInfraStackName'
            - Name: LAKERUNNER_KAFKA_SASL_PASSWORD
              ValueFrom: !Sub
                - '${SecretArn}:password::'
                - SecretArn: !ImportValue
                    Fn::Sub:
                      - ${CommonInfraStackName}-MSKCredentialsArn
                      - CommonInfraStackName: !Ref 'CommonInfraStackName'
          User: '0'
      Cpu: '1024'
      ExecutionRoleArn: !GetAtt 'ExecRole.Arn'
      Family: lakerunner-pubsub-sqs-task
      Memory: '2048'
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      RuntimePlatform:
        CpuArchitecture: ARM64
        OperatingSystemFamily: LINUX
      TaskRoleArn: !GetAtt 'TaskRole.Arn'
      Volumes:
        - Name: scratch
    Type: AWS::ECS::TaskDefinition
  TaskDefLakerunnerQueryApi:
    Properties:
      ContainerDefinitions:
        - Command:
            - /app/bin/lakerunner
            - query-api
          Environment:
            - Name: OTEL_SERVICE_NAME
              Value: lakerunner-query-api
            - Name: TMPDIR
              Value: /scratch
            - Name: HOME
              Value: /scratch
            - Name: STORAGE_PROFILE_FILE
              Value: env:STORAGE_PROFILES_ENV
            - Name: API_KEYS_FILE
              Value: env:API_KEYS_ENV
            - Name: SQS_QUEUE_URL
              Value: !Sub 'https://sqs.${AWS::Region}.amazonaws.com/${AWS::AccountId}/lakerunner-ingest-queue'
            - Name: SQS_REGION
              Value: !Ref 'AWS::Region'
            - Name: LRDB_HOST
              Value: !ImportValue
                Fn::Sub:
                  - ${CommonInfraStackName}-DbEndpoint
                  - CommonInfraStackName: !Ref 'CommonInfraStackName'
            - Name: LRDB_PORT
              Value: !ImportValue
                Fn::Sub:
                  - ${CommonInfraStackName}-DbPort
                  - CommonInfraStackName: !Ref 'CommonInfraStackName'
            - Name: LRDB_DBNAME
              Value: lakerunner
            - Name: LRDB_USER
              Value: lakerunner
            - Name: LRDB_SSLMODE
              Value: require
            - Name: CONFIGDB_HOST
              Value: !ImportValue
                Fn::Sub:
                  - ${CommonInfraStackName}-DbEndpoint
                  - CommonInfraStackName: !Ref 'CommonInfraStackName'
            - Name: CONFIGDB_PORT
              Value: !ImportValue
                Fn::Sub:
                  - ${CommonInfraStackName}-DbPort
                  - CommonInfraStackName: !Ref 'CommonInfraStackName'
            - Name: CONFIGDB_DBNAME
              Value: lakerunner
            - Name: CONFIGDB_USER
              Value: lakerunner
            - Name: CONFIGDB_SSLMODE
              Value: require
            - Name: LAKERUNNER_KAFKA_BROKERS
              Value: !Ref 'MSKBrokers'
            - Name: LAKERUNNER_KAFKA_TLS_ENABLED
              Value: 'true'
            - Name: LAKERUNNER_KAFKA_SASL_ENABLED
              Value: 'true'
            - Name: LAKERUNNER_KAFKA_SASL_MECHANISM
              Value: SCRAM-SHA-512
            - Name: OTEL_EXPORTER_OTLP_ENDPOINT
              Value: !If
                - EnableOtlp
                - !Ref 'OtelEndpoint'
                - !Ref 'AWS::NoValue'
            - Name: ENABLE_OTLP_TELEMETRY
              Value: !If
                - EnableOtlp
                - 'true'
                - !Ref 'AWS::NoValue'
            - Name: EXECUTION_ENVIRONMENT
              Value: ecs
            - Name: QUERY_WORKER_SERVICE_NAME
              Value: lakerunner-query-worker
            - Name: QUERY_WORKER_CLUSTER_NAME
              Value: !ImportValue
                Fn::Sub:
                  - ${CommonInfraStackName}-ClusterName
                  - CommonInfraStackName: !Ref 'CommonInfraStackName'
          HealthCheck:
            Command:
              - /app/bin/lakerunner
              - sysinfo
            Interval: 30
            Retries: 3
            StartPeriod: 60
            Timeout: 5
          Image: !Ref 'GoServicesImage'
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref 'LogGroupLakerunnerQueryApi'
              awslogs-region: !Ref 'AWS::Region'
              awslogs-stream-prefix: lakerunner-query-api
          MountPoints:
            - ContainerPath: /scratch
              ReadOnly: false
              SourceVolume: scratch
          Name: AppContainer
          PortMappings:
            - ContainerPort: 8080
              Protocol: tcp
          Secrets:
            - Name: STORAGE_PROFILES_ENV
              ValueFrom: !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/lakerunner/storage_profiles'
            - Name: API_KEYS_ENV
              ValueFrom: !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/lakerunner/api_keys'
            - Name: LRDB_PASSWORD
              ValueFrom: !Sub
                - '${SecretArn}:password::'
                - SecretArn: !ImportValue
                    Fn::Sub:
                      - ${CommonInfraStackName}-DbSecretArn
                      - CommonInfraStackName: !Ref 'CommonInfraStackName'
            - Name: CONFIGDB_PASSWORD
              ValueFrom: !Sub
                - '${SecretArn}:password::'
                - SecretArn: !ImportValue
                    Fn::Sub:
                      - ${CommonInfraStackName}-DbSecretArn
                      - CommonInfraStackName: !Ref 'CommonInfraStackName'
            - Name: LAKERUNNER_KAFKA_SASL_USERNAME
              ValueFrom: !Sub
                - '${SecretArn}:username::'
                - SecretArn: !ImportValue
                    Fn::Sub:
                      - ${CommonInfraStackName}-MSKCredentialsArn
                      - CommonInfraStackName: !Ref 'CommonInfraStackName'
            - Name: LAKERUNNER_KAFKA_SASL_PASSWORD
              ValueFrom: !Sub
                - '${SecretArn}:password::'
                - SecretArn: !ImportValue
                    Fn::Sub:
                      - ${CommonInfraStackName}-MSKCredentialsArn
                      - CommonInfraStackName: !Ref 'CommonInfraStackName'
          User: '0'
      Cpu: '1024'
      ExecutionRoleArn: !GetAtt 'ExecRole.Arn'
      Family: lakerunner-query-api-task
      Memory: '2048'
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      RuntimePlatform:
        CpuArchitecture: ARM64
        OperatingSystemFamily: LINUX
      TaskRoleArn: !GetAtt 'QueryApiTaskRole.Arn'
      Volumes:
        - Name: scratch
    Type: AWS::ECS::TaskDefinition
  TaskDefLakerunnerQueryWorker:
    Properties:
      ContainerDefinitions:
        - Command:
            - /app/bin/lakerunner
            - query-worker
          Environment:
            - Name: OTEL_SERVICE_NAME
              Value: lakerunner-query-worker
            - Name: TMPDIR
              Value: /scratch
            - Name: HOME
              Value: /scratch
            - Name: STORAGE_PROFILE_FILE
              Value: env:STORAGE_PROFILES_ENV
            - Name: API_KEYS_FILE
              Value: env:API_KEYS_ENV
            - Name: SQS_QUEUE_URL
              Value: !Sub 'https://sqs.${AWS::Region}.amazonaws.com/${AWS::AccountId}/lakerunner-ingest-queue'
            - Name: SQS_REGION
              Value: !Ref 'AWS::Region'
            - Name: LRDB_HOST
              Value: !ImportValue
                Fn::Sub:
                  - ${CommonInfraStackName}-DbEndpoint
                  - CommonInfraStackName: !Ref 'CommonInfraStackName'
            - Name: LRDB_PORT
              Value: !ImportValue
                Fn::Sub:
                  - ${CommonInfraStackName}-DbPort
                  - CommonInfraStackName: !Ref 'CommonInfraStackName'
            - Name: LRDB_DBNAME
              Value: lakerunner
            - Name: LRDB_USER
              Value: lakerunner
            - Name: LRDB_SSLMODE
              Value: require
            - Name: CONFIGDB_HOST
              Value: !ImportValue
                Fn::Sub:
                  - ${CommonInfraStackName}-DbEndpoint
                  - CommonInfraStackName: !Ref 'CommonInfraStackName'
            - Name: CONFIGDB_PORT
              Value: !ImportValue
                Fn::Sub:
                  - ${CommonInfraStackName}-DbPort
                  - CommonInfraStackName: !Ref 'CommonInfraStackName'
            - Name: CONFIGDB_DBNAME
              Value: lakerunner
            - Name: CONFIGDB_USER
              Value: lakerunner
            - Name: CONFIGDB_SSLMODE
              Value: require
            - Name: LAKERUNNER_KAFKA_BROKERS
              Value: !Ref 'MSKBrokers'
            - Name: LAKERUNNER_KAFKA_TLS_ENABLED
              Value: 'true'
            - Name: LAKERUNNER_KAFKA_SASL_ENABLED
              Value: 'true'
            - Name: LAKERUNNER_KAFKA_SASL_MECHANISM
              Value: SCRAM-SHA-512
            - Name: OTEL_EXPORTER_OTLP_ENDPOINT
              Value: !If
                - EnableOtlp
                - !Ref 'OtelEndpoint'
                - !Ref 'AWS::NoValue'
            - Name: ENABLE_OTLP_TELEMETRY
              Value: !If
                - EnableOtlp
                - 'true'
                - !Ref 'AWS::NoValue'
          HealthCheck:
            Command:
              - /app/bin/lakerunner
              - sysinfo
            Interval: 30
            Retries: 3
            StartPeriod: 60
            Timeout: 5
          Image: !Ref 'GoServicesImage'
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref 'LogGroupLakerunnerQueryWorker'
              awslogs-region: !Ref 'AWS::Region'
              awslogs-stream-prefix: lakerunner-query-worker
          MountPoints:
            - ContainerPath: /scratch
              ReadOnly: false
              SourceVolume: scratch
          Name: AppContainer
          PortMappings:
            - ContainerPort: 8081
              Protocol: tcp
          Secrets:
            - Name: STORAGE_PROFILES_ENV
              ValueFrom: !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/lakerunner/storage_profiles'
            - Name: API_KEYS_ENV
              ValueFrom: !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/lakerunner/api_keys'
            - Name: LRDB_PASSWORD
              ValueFrom: !Sub
                - '${SecretArn}:password::'
                - SecretArn: !ImportValue
                    Fn::Sub:
                      - ${CommonInfraStackName}-DbSecretArn
                      - CommonInfraStackName: !Ref 'CommonInfraStackName'
            - Name: CONFIGDB_PASSWORD
              ValueFrom: !Sub
                - '${SecretArn}:password::'
                - SecretArn: !ImportValue
                    Fn::Sub:
                      - ${CommonInfraStackName}-DbSecretArn
                      - CommonInfraStackName: !Ref 'CommonInfraStackName'
            - Name: LAKERUNNER_KAFKA_SASL_USERNAME
              ValueFrom: !Sub
                - '${SecretArn}:username::'
                - SecretArn: !ImportValue
                    Fn::Sub:
                      - ${CommonInfraStackName}-MSKCredentialsArn
                      - CommonInfraStackName: !Ref 'CommonInfraStackName'
            - Name: LAKERUNNER_KAFKA_SASL_PASSWORD
              ValueFrom: !Sub
                - '${SecretArn}:password::'
                - SecretArn: !ImportValue
                    Fn::Sub:
                      - ${CommonInfraStackName}-MSKCredentialsArn
                      - CommonInfraStackName: !Ref 'CommonInfraStackName'
          User: '0'
      Cpu: '2048'
      ExecutionRoleArn: !GetAtt 'ExecRole.Arn'
      Family: lakerunner-query-worker-task
      Memory: '8192'
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      RuntimePlatform:
        CpuArchitecture: ARM64
        OperatingSystemFamily: LINUX
      TaskRoleArn: !GetAtt 'QueryWorkerTaskRole.Arn'
      Volumes:
        - Name: scratch
    Type: AWS::ECS::TaskDefinition
  TaskDefLakerunnerRollupMetrics:
    Properties:
      ContainerDefinitions:
        - Command:
            - /app/bin/lakerunner
            - rollup-metrics
          Environment:
            - Name: OTEL_SERVICE_NAME
              Value: lakerunner-rollup-metrics
            - Name: TMPDIR
              Value: /scratch
            - Name: HOME
              Value: /scratch
            - Name: STORAGE_PROFILE_FILE
              Value: env:STORAGE_PROFILES_ENV
            - Name: API_KEYS_FILE
              Value: env:API_KEYS_ENV
            - Name: SQS_QUEUE_URL
              Value: !Sub 'https://sqs.${AWS::Region}.amazonaws.com/${AWS::AccountId}/lakerunner-ingest-queue'
            - Name: SQS_REGION
              Value: !Ref 'AWS::Region'
            - Name: LRDB_HOST
              Value: !ImportValue
                Fn::Sub:
                  - ${CommonInfraStackName}-DbEndpoint
                  - CommonInfraStackName: !Ref 'CommonInfraStackName'
            - Name: LRDB_PORT
              Value: !ImportValue
                Fn::Sub:
                  - ${CommonInfraStackName}-DbPort
                  - CommonInfraStackName: !Ref 'CommonInfraStackName'
            - Name: LRDB_DBNAME
              Value: lakerunner
            - Name: LRDB_USER
              Value: lakerunner
            - Name: LRDB_SSLMODE
              Value: require
            - Name: CONFIGDB_HOST
              Value: !ImportValue
                Fn::Sub:
                  - ${CommonInfraStackName}-DbEndpoint
                  - CommonInfraStackName: !Ref 'CommonInfraStackName'
            - Name: CONFIGDB_PORT
              Value: !ImportValue
                Fn::Sub:
                  - ${CommonInfraStackName}-DbPort
                  - CommonInfraStackName: !Ref 'CommonInfraStackName'
            - Name: CONFIGDB_DBNAME
              Value: lakerunner
            - Name: CONFIGDB_USER
              Value: lakerunner
            - Name: CONFIGDB_SSLMODE
              Value: require
            - Name: LAKERUNNER_KAFKA_BROKERS
              Value: !Ref 'MSKBrokers'
            - Name: LAKERUNNER_KAFKA_TLS_ENABLED
              Value: 'true'
            - Name: LAKERUNNER_KAFKA_SASL_ENABLED
              Value: 'true'
            - Name: LAKERUNNER_KAFKA_SASL_MECHANISM
              Value: SCRAM-SHA-512
            - Name: OTEL_EXPORTER_OTLP_ENDPOINT
              Value: !If
                - EnableOtlp
                - !Ref 'OtelEndpoint'
                - !Ref 'AWS::NoValue'
            - Name: ENABLE_OTLP_TELEMETRY
              Value: !If
                - EnableOtlp
                - 'true'
                - !Ref 'AWS::NoValue'
          HealthCheck:
            Command:
              - /app/bin/lakerunner
              - sysinfo
            Interval: 30
            Retries: 3
            StartPeriod: 60
            Timeout: 5
          Image: !Ref 'GoServicesImage'
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref 'LogGroupLakerunnerRollupMetrics'
              awslogs-region: !Ref 'AWS::Region'
              awslogs-stream-prefix: lakerunner-rollup-metrics
          MountPoints:
            - ContainerPath: /scratch
              ReadOnly: false
              SourceVolume: scratch
          Name: AppContainer
          PortMappings: []
          Secrets:
            - Name: STORAGE_PROFILES_ENV
              ValueFrom: !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/lakerunner/storage_profiles'
            - Name: API_KEYS_ENV
              ValueFrom: !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/lakerunner/api_keys'
            - Name: LRDB_PASSWORD
              ValueFrom: !Sub
                - '${SecretArn}:password::'
                - SecretArn: !ImportValue
                    Fn::Sub:
                      - ${CommonInfraStackName}-DbSecretArn
                      - CommonInfraStackName: !Ref 'CommonInfraStackName'
            - Name: CONFIGDB_PASSWORD
              ValueFrom: !Sub
                - '${SecretArn}:password::'
                - SecretArn: !ImportValue
                    Fn::Sub:
                      - ${CommonInfraStackName}-DbSecretArn
                      - CommonInfraStackName: !Ref 'CommonInfraStackName'
            - Name: LAKERUNNER_KAFKA_SASL_USERNAME
              ValueFrom: !Sub
                - '${SecretArn}:username::'
                - SecretArn: !ImportValue
                    Fn::Sub:
                      - ${CommonInfraStackName}-MSKCredentialsArn
                      - CommonInfraStackName: !Ref 'CommonInfraStackName'
            - Name: LAKERUNNER_KAFKA_SASL_PASSWORD
              ValueFrom: !Sub
                - '${SecretArn}:password::'
                - SecretArn: !ImportValue
                    Fn::Sub:
                      - ${CommonInfraStackName}-MSKCredentialsArn
                      - CommonInfraStackName: !Ref 'CommonInfraStackName'
          User: '0'
      Cpu: '1024'
      ExecutionRoleArn: !GetAtt 'ExecRole.Arn'
      Family: lakerunner-rollup-metrics-task
      Memory: '2048'
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      RuntimePlatform:
        CpuArchitecture: ARM64
        OperatingSystemFamily: LINUX
      TaskRoleArn: !GetAtt 'TaskRole.Arn'
      Volumes:
        - Name: scratch
    Type: AWS::ECS::TaskDefinition
  TaskDefLakerunnerSweeper:
    Properties:
      ContainerDefinitions:
        - Command:
            - /app/bin/lakerunner
            - sweeper
          Environment:
            - Name: OTEL_SERVICE_NAME
              Value: lakerunner-sweeper
            - Name: TMPDIR
              Value: /scratch
            - Name: HOME
              Value: /scratch
            - Name: STORAGE_PROFILE_FILE
              Value: env:STORAGE_PROFILES_ENV
            - Name: API_KEYS_FILE
              Value: env:API_KEYS_ENV
            - Name: SQS_QUEUE_URL
              Value: !Sub 'https://sqs.${AWS::Region}.amazonaws.com/${AWS::AccountId}/lakerunner-ingest-queue'
            - Name: SQS_REGION
              Value: !Ref 'AWS::Region'
            - Name: LRDB_HOST
              Value: !ImportValue
                Fn::Sub:
                  - ${CommonInfraStackName}-DbEndpoint
                  - CommonInfraStackName: !Ref 'CommonInfraStackName'
            - Name: LRDB_PORT
              Value: !ImportValue
                Fn::Sub:
                  - ${CommonInfraStackName}-DbPort
                  - CommonInfraStackName: !Ref 'CommonInfraStackName'
            - Name: LRDB_DBNAME
              Value: lakerunner
            - Name: LRDB_USER
              Value: lakerunner
            - Name: LRDB_SSLMODE
              Value: require
            - Name: CONFIGDB_HOST
              Value: !ImportValue
                Fn::Sub:
                  - ${CommonInfraStackName}-DbEndpoint
                  - CommonInfraStackName: !Ref 'CommonInfraStackName'
            - Name: CONFIGDB_PORT
              Value: !ImportValue
                Fn::Sub:
                  - ${CommonInfraStackName}-DbPort
                  - CommonInfraStackName: !Ref 'CommonInfraStackName'
            - Name: CONFIGDB_DBNAME
              Value: lakerunner
            - Name: CONFIGDB_USER
              Value: lakerunner
            - Name: CONFIGDB_SSLMODE
              Value: require
            - Name: LAKERUNNER_KAFKA_BROKERS
              Value: !Ref 'MSKBrokers'
            - Name: LAKERUNNER_KAFKA_TLS_ENABLED
              Value: 'true'
            - Name: LAKERUNNER_KAFKA_SASL_ENABLED
              Value: 'true'
            - Name: LAKERUNNER_KAFKA_SASL_MECHANISM
              Value: SCRAM-SHA-512
            - Name: OTEL_EXPORTER_OTLP_ENDPOINT
              Value: !If
                - EnableOtlp
                - !Ref 'OtelEndpoint'
                - !Ref 'AWS::NoValue'
            - Name: ENABLE_OTLP_TELEMETRY
              Value: !If
                - EnableOtlp
                - 'true'
                - !Ref 'AWS::NoValue'
          HealthCheck:
            Command:
              - /app/bin/lakerunner
              - sysinfo
            Interval: 30
            Retries: 3
            StartPeriod: 60
            Timeout: 5
          Image: !Ref 'GoServicesImage'
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref 'LogGroupLakerunnerSweeper'
              awslogs-region: !Ref 'AWS::Region'
              awslogs-stream-prefix: lakerunner-sweeper
          MountPoints:
            - ContainerPath: /scratch
              ReadOnly: false
              SourceVolume: scratch
          Name: AppContainer
          PortMappings: []
          Secrets:
            - Name: STORAGE_PROFILES_ENV
              ValueFrom: !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/lakerunner/storage_profiles'
            - Name: API_KEYS_ENV
              ValueFrom: !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/lakerunner/api_keys'
            - Name: LRDB_PASSWORD
              ValueFrom: !Sub
                - '${SecretArn}:password::'
                - SecretArn: !ImportValue
                    Fn::Sub:
                      - ${CommonInfraStackName}-DbSecretArn
                      - CommonInfraStackName: !Ref 'CommonInfraStackName'
            - Name: CONFIGDB_PASSWORD
              ValueFrom: !Sub
                - '${SecretArn}:password::'
                - SecretArn: !ImportValue
                    Fn::Sub:
                      - ${CommonInfraStackName}-DbSecretArn
                      - CommonInfraStackName: !Ref 'CommonInfraStackName'
            - Name: LAKERUNNER_KAFKA_SASL_USERNAME
              ValueFrom: !Sub
                - '${SecretArn}:username::'
                - SecretArn: !ImportValue
                    Fn::Sub:
                      - ${CommonInfraStackName}-MSKCredentialsArn
                      - CommonInfraStackName: !Ref 'CommonInfraStackName'
            - Name: LAKERUNNER_KAFKA_SASL_PASSWORD
              ValueFrom: !Sub
                - '${SecretArn}:password::'
                - SecretArn: !ImportValue
                    Fn::Sub:
                      - ${CommonInfraStackName}-MSKCredentialsArn
                      - CommonInfraStackName: !Ref 'CommonInfraStackName'
          User: '0'
      Cpu: '256'
      ExecutionRoleArn: !GetAtt 'ExecRole.Arn'
      Family: lakerunner-sweeper-task
      Memory: '512'
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      RuntimePlatform:
        CpuArchitecture: ARM64
        OperatingSystemFamily: LINUX
      TaskRoleArn: !GetAtt 'TaskRole.Arn'
      Volumes:
        - Name: scratch
    Type: AWS::ECS::TaskDefinition
  TaskFromAlb8080:
    Properties:
      Description: ALB to query-api app port
      FromPort: 8080
      GroupId: !ImportValue
        Fn::Sub:
          - ${CommonInfraStackName}-TaskSGId
          - CommonInfraStackName: !Ref 'CommonInfraStackName'
      IpProtocol: tcp
      SourceSecurityGroupId: !Ref 'AlbSecurityGroup'
      ToPort: 8080
    Type: AWS::EC2::SecurityGroupIngress
  TaskFromAlb8090:
    Properties:
      Description: ALB health checks
      FromPort: 8090
      GroupId: !ImportValue
        Fn::Sub:
          - ${CommonInfraStackName}-TaskSGId
          - CommonInfraStackName: !Ref 'CommonInfraStackName'
      IpProtocol: tcp
      SourceSecurityGroupId: !Ref 'AlbSecurityGroup'
      ToPort: 8090
    Type: AWS::EC2::SecurityGroupIngress
  TaskRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: '2012-10-17'
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:DeleteObject
                  - s3:ListBucket
                Effect: Allow
                Resource:
                  - !ImportValue
                    Fn::Sub:
                      - ${CommonInfraStackName}-BucketArn
                      - CommonInfraStackName: !Ref 'CommonInfraStackName'
                  - !Sub
                    - ${BucketArn}/*
                    - BucketArn: !ImportValue
                        Fn::Sub:
                          - ${CommonInfraStackName}-BucketArn
                          - CommonInfraStackName: !Ref 'CommonInfraStackName'
              - Action:
                  - sqs:ReceiveMessage
                  - sqs:DeleteMessage
                  - sqs:GetQueueAttributes
                Effect: Allow
                Resource:
                  - !Sub 'arn:aws:sqs:${AWS::Region}:${AWS::AccountId}:lakerunner-*'
              - Action:
                  - secretsmanager:GetSecretValue
                Effect: Allow
                Resource:
                  - !Sub
                    - ${SecretArn}*
                    - SecretArn: !ImportValue
                        Fn::Sub:
                          - ${CommonInfraStackName}-DbSecretArn
                          - CommonInfraStackName: !Ref 'CommonInfraStackName'
                  - !Sub
                    - ${SecretArn}*
                    - SecretArn: !ImportValue
                        Fn::Sub:
                          - ${CommonInfraStackName}-MSKCredentialsArn
                          - CommonInfraStackName: !Ref 'CommonInfraStackName'
                  - !Sub 'arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:${AWS::StackName}-*'
              - Action:
                  - kms:Decrypt
                  - kms:DescribeKey
                Effect: Allow
                Resource: !ImportValue
                  Fn::Sub:
                    - ${CommonInfraStackName}-MSKSecretsKeyArn
                    - CommonInfraStackName: !Ref 'CommonInfraStackName'
              - Action:
                  - elasticfilesystem:ClientMount
                  - elasticfilesystem:ClientWrite
                  - elasticfilesystem:ClientRootAccess
                  - elasticfilesystem:DescribeFileSystems
                  - elasticfilesystem:DescribeMountTargets
                  - elasticfilesystem:DescribeAccessPoints
                Effect: Allow
                Resource: '*'
            Version: '2012-10-17'
          PolicyName: S3AndSQSAccess
      RoleName: !Sub '${AWS::StackName}-task-role'
    Type: AWS::IAM::Role
  Tg7101:
    Properties:
      HealthCheckIntervalSeconds: 5
      HealthCheckPath: /healthz
      HealthCheckPort: '8090'
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 2
      HealthyThresholdCount: 2
      Matcher:
        HttpCode: '200'
      Port: 8080
      Protocol: HTTP
      TargetGroupAttributes:
        - Key: stickiness.enabled
          Value: 'false'
        - Key: deregistration_delay.timeout_seconds
          Value: '5'
      TargetType: ip
      UnhealthyThresholdCount: 2
      VpcId: !ImportValue
        Fn::Sub:
          - ${CommonInfraStackName}-VpcId
          - CommonInfraStackName: !Ref 'CommonInfraStackName'
    Type: AWS::ElasticLoadBalancingV2::TargetGroup

