Conditions:
  CreateTaskRole: !Equals
    - !Ref 'ExistingTaskRoleArn'
    - ''
  UseExistingTaskRole: !Not
    - !Equals
      - !Ref 'ExistingTaskRoleArn'
      - ''
Description: RDS PostgreSQL database stack for Lakerunner.
Outputs:
  DatabaseSecurityGroupId:
    Description: Database security group ID
    Export:
      Name: !Sub '${AWS::StackName}-DatabaseSecurityGroupId'
    Value: !Ref 'DatabaseSecurityGroup'
  DbEndpoint:
    Description: Database endpoint
    Export:
      Name: !Sub '${AWS::StackName}-DbEndpoint'
    Value: !GetAtt 'LakerunnerDb.Endpoint.Address'
  DbPort:
    Description: Database port
    Export:
      Name: !Sub '${AWS::StackName}-DbPort'
    Value: !GetAtt 'LakerunnerDb.Endpoint.Port'
  DbSecretArn:
    Description: Database secret ARN
    Export:
      Name: !Sub '${AWS::StackName}-DbSecretArn'
    Value: !Ref 'DbSecret'
  TaskRoleArn:
    Description: Task role ARN for database access (created or existing)
    Export:
      Name: !Sub '${AWS::StackName}-TaskRoleArn'
    Value: !If
      - UseExistingTaskRole
      - !Ref 'ExistingTaskRoleArn'
      - !GetAtt 'DatabaseTaskRole.Arn'
Parameters:
  DbInstanceClass:
    AllowedValues:
      - db.r6g.large
      - db.r6g.xlarge
      - db.r6g.2xlarge
      - db.r6g.4xlarge
      - db.r6g.8xlarge
      - db.r6g.12xlarge
      - db.r6g.16xlarge
    Default: db.r6g.large
    Description: RDS instance class.
    Type: String
  ExistingTaskRoleArn:
    Default: ''
    Description: 'OPTIONAL: Existing task role ARN to attach database permissions to. Leave blank to create a new role.'
    Type: String
  PrivateSubnets:
    Description: 'REQUIRED: Private subnet IDs for the database'
    Type: List<AWS::EC2::Subnet::Id>
  VpcId:
    Description: 'REQUIRED: VPC ID where the database will be deployed'
    Type: AWS::EC2::VPC::Id
Resources:
  DatabaseCreator:
    Properties:
      Databases: lrdb,configdb
      DbEndpoint: !GetAtt 'LakerunnerDb.Endpoint.Address'
      DbPort: !GetAtt 'LakerunnerDb.Endpoint.Port'
      SecretArn: !Ref 'DbSecret'
      ServiceToken: !GetAtt 'DatabaseCreatorFunction.Arn'
    Type: AWS::CloudFormation::CustomResource
  DatabaseCreatorFunction:
    Properties:
      Architectures:
        - x86_64
      Code:
        ZipFile: |2

          import json
          import boto3
          import psycopg2
          import cfnresponse

          def lambda_handler(event, context):
              try:
                  request_type = event['RequestType']
                  properties = event['ResourceProperties']

                  if request_type == 'Delete':
                      cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
                      return

                  # Get database connection info
                  secrets_client = boto3.client('secretsmanager')
                  secret_response = secrets_client.get_secret_value(SecretId=properties['SecretArn'])
                  secret = json.loads(secret_response['SecretString'])

                  # Connect to PostgreSQL
                  conn = psycopg2.connect(
                      host=properties['DbEndpoint'],
                      port=properties['DbPort'],
                      user=secret['username'],
                      password=secret['password'],
                      dbname='postgres'
                  )
                  conn.autocommit = True

                  cursor = conn.cursor()

                  # Create databases
                  databases = properties['Databases'].split(',')
                  for db_name in databases:
                      db_name = db_name.strip()

                      # Check if database exists
                      cursor.execute("SELECT 1 FROM pg_database WHERE datname = %s", (db_name,))
                      if not cursor.fetchone():
                          cursor.execute(f'CREATE DATABASE "{db_name}"')
                          print(f"Created database: {db_name}")
                      else:
                          print(f"Database already exists: {db_name}")

                  cursor.close()
                  conn.close()

                  cfnresponse.send(event, context, cfnresponse.SUCCESS, {})

              except Exception as e:
                  print(f"Error: {str(e)}")
                  cfnresponse.send(event, context, cfnresponse.FAILED, {}, reason=str(e))
      FunctionName: !Sub '${AWS::StackName}-database-creator'
      Handler: index.lambda_handler
      Layers:
        - !Ref 'Psycopg2Layer'
      Role: !GetAtt 'DatabaseLambdaRole.Arn'
      Runtime: python3.11
      Timeout: 300
      VpcConfig:
        SecurityGroupIds:
          - !Ref 'DatabaseSecurityGroup'
        SubnetIds: !Ref 'PrivateSubnets'
    Type: AWS::Lambda::Function
  DatabaseLambdaRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: '2012-10-17'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - secretsmanager:GetSecretValue
                Effect: Allow
                Resource:
                  - !Ref 'DbSecret'
            Version: '2012-10-17'
          PolicyName: DatabaseAccess
      RoleName: !Sub '${AWS::StackName}-database-lambda-role'
    Type: AWS::IAM::Role
  DatabaseSecurityGroup:
    Properties:
      GroupDescription: Security group for RDS PostgreSQL database
      SecurityGroupIngress:
        - CidrIp: 10.0.0.0/8
          Description: PostgreSQL access from private networks
          FromPort: 5432
          IpProtocol: tcp
          ToPort: 5432
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-db-sg'
        - Key: Component
          Value: Database
        - Key: ManagedBy
          Value: Lakerunner
      VpcId: !Ref 'VpcId'
    Type: AWS::EC2::SecurityGroup
  DatabaseTaskRole:
    Condition: CreateTaskRole
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: '2012-10-17'
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - ssm:GetParameter
                  - ssm:GetParameters
                Effect: Allow
                Resource:
                  - !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/lakerunner/*'
                  - !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${AWS::StackName}-*'
            Version: '2012-10-17'
          PolicyName: BaseECSTaskPolicy
      RoleName: !Sub '${AWS::StackName}-database-task-role'
    Type: AWS::IAM::Role
  DbSecret:
    Properties:
      GenerateSecretString:
        ExcludePunctuation: true
        GenerateStringKey: password
        SecretStringTemplate: '{"username":"lakerunner"}'
    Type: AWS::SecretsManager::Secret
  DbSubnetGroup:
    Properties:
      DBSubnetGroupDescription: DB subnets
      SubnetIds: !Ref 'PrivateSubnets'
    Type: AWS::RDS::DBSubnetGroup
  LakerunnerDb:
    Properties:
      AllocatedStorage: '100'
      CopyTagsToSnapshot: true
      DBInstanceClass: !Ref 'DbInstanceClass'
      DBSubnetGroupName: !Ref 'DbSubnetGroup'
      DeletionProtection: false
      Engine: postgres
      EngineVersion: '17'
      MasterUserPassword: !Sub
        - '{{resolve:secretsmanager:${S}:SecretString:password}}'
        - S: !Ref 'DbSecret'
      MasterUsername: !Sub
        - '{{resolve:secretsmanager:${S}:SecretString:username}}'
        - S: !Ref 'DbSecret'
      MultiAZ: false
      PubliclyAccessible: false
      StorageType: gp3
      VPCSecurityGroups:
        - !Ref 'DatabaseSecurityGroup'
    Type: AWS::RDS::DBInstance
  Psycopg2Layer:
    Properties:
      CompatibleArchitectures:
        - x86_64
      CompatibleRuntimes:
        - python3.11
      Content:
        S3Bucket: aws-data-wrangler-public-artifacts
        S3Key: releases/3.9.0/awswrangler-layer-3.9.0-py3.11-x86_64.zip
      Description: psycopg2-binary for PostgreSQL connectivity
      LayerName: !Sub '${AWS::StackName}-psycopg2'
    Type: AWS::Lambda::LayerVersion
  SecretsManagerTaskPolicy:
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - secretsmanager:GetSecretValue
            Effect: Allow
            Resource:
              - !Ref 'DbSecret'
              - !Sub
                - ${DbSecretArn}*
                - DbSecretArn: !Ref 'DbSecret'
        Version: '2012-10-17'
      PolicyName: SecretsManagerAccess
      Roles:
        - !If
          - UseExistingTaskRole
          - !Select
            - 1
            - !Split
              - /
              - !Ref 'ExistingTaskRoleArn'
          - !Ref 'DatabaseTaskRole'
    Type: AWS::IAM::Policy

