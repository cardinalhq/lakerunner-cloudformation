Conditions:
  CreateTaskRole: !Equals
    - !Ref 'ExistingTaskRoleArn'
    - ''
  UseExistingTaskRole: !Not
    - !Equals
      - !Ref 'ExistingTaskRoleArn'
      - ''
Description: Amazon MSK (Kafka) cluster for Lakerunner.
Outputs:
  MSKClusterArn:
    Description: MSK cluster ARN
    Export:
      Name: !Sub '${AWS::StackName}-MSKClusterArn'
    Value: !GetAtt 'MSKCluster.Arn'
  MSKClusterName:
    Description: MSK cluster name
    Export:
      Name: !Sub '${AWS::StackName}-MSKClusterName'
    Value: !Ref 'MSKCluster'
  MSKCredentialsArn:
    Description: MSK SASL/SCRAM credentials secret ARN
    Export:
      Name: !Sub '${AWS::StackName}-MSKCredentialsArn'
    Value: !Ref 'MSKCredentials'
  MSKSecurityGroupId:
    Description: MSK security group ID for granting access from ECS/EKS
    Export:
      Name: !Sub '${AWS::StackName}-MSKSecurityGroupId'
    Value: !Ref 'MSKSecurityGroup'
  TaskRoleArn:
    Description: Task role ARN for MSK access (created or existing)
    Export:
      Name: !Sub '${AWS::StackName}-TaskRoleArn'
    Value: !If
      - UseExistingTaskRole
      - !Ref 'ExistingTaskRoleArn'
      - !GetAtt 'MSKTaskRole.Arn'
Parameters:
  ExistingTaskRoleArn:
    Default: ''
    Description: 'OPTIONAL: Existing task role ARN to attach MSK permissions to. Leave blank to create a new role.'
    Type: String
  MSKBrokerNodes:
    Default: 2
    Description: Number of MSK broker nodes. Must be between 2 and 15.
    MaxValue: 15
    MinValue: 2
    Type: Number
  MSKInstanceType:
    AllowedValues:
      - kafka.t3.small
      - kafka.m5.large
      - kafka.m5.xlarge
      - kafka.m5.2xlarge
      - kafka.m5.4xlarge
      - kafka.m5.8xlarge
      - kafka.m5.12xlarge
      - kafka.m5.16xlarge
      - kafka.m5.24xlarge
      - kafka.m7g.large
      - kafka.m7g.xlarge
      - kafka.m7g.2xlarge
      - kafka.m7g.4xlarge
      - kafka.m7g.8xlarge
      - kafka.m7g.12xlarge
      - kafka.m7g.16xlarge
    Default: kafka.t3.small
    Description: MSK broker instance type.
    Type: String
  PrivateSubnets:
    Description: 'REQUIRED: Private subnet IDs for the MSK cluster (minimum 2, maximum 3).'
    Type: List<AWS::EC2::Subnet::Id>
  VpcId:
    Description: 'REQUIRED: VPC ID where MSK cluster will be deployed.'
    Type: AWS::EC2::VPC::Id
Resources:
  MSKCluster:
    Properties:
      BrokerNodeGroupInfo:
        ClientSubnets: !Ref 'PrivateSubnets'
        InstanceType: !Ref 'MSKInstanceType'
        SecurityGroups:
          - !Ref 'MSKSecurityGroup'
        StorageInfo:
          EBSStorageInfo:
            VolumeSize: 100
      ClientAuthentication:
        Sasl:
          Scram:
            Enabled: true
      ClusterName: !Sub '${AWS::StackName}-msk-cluster'
      EncryptionInfo:
        EncryptionInTransit:
          ClientBroker: TLS
          InCluster: true
      KafkaVersion: 3.9.x
      NumberOfBrokerNodes: !Ref 'MSKBrokerNodes'
      Tags:
        Environment: !Ref 'AWS::StackName'
        ManagedBy: Lakerunner
        Name: !Sub '${AWS::StackName}-msk-cluster'
    Type: AWS::MSK::Cluster
  MSKCredentials:
    Properties:
      Description: MSK SASL/SCRAM credentials for Kafka authentication
      GenerateSecretString:
        ExcludeCharacters: '"@/\'
        GenerateStringKey: password
        PasswordLength: 32
        SecretStringTemplate: '{"username": "lakerunner"}'
      Name: !Sub 'AmazonMSK_${AWS::StackName}'
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-msk-credentials'
        - Key: ManagedBy
          Value: Lakerunner
        - Key: Component
          Value: MSK
    Type: AWS::SecretsManager::Secret
  MSKScramSecretAssociation:
    Properties:
      ClusterArn: !GetAtt 'MSKCluster.Arn'
      SecretArnList:
        - !Ref 'MSKCredentials'
    Type: AWS::MSK::BatchScramSecret
  MSKSecurityGroup:
    Properties:
      GroupDescription: Security group for MSK cluster - grant access by referencing this SG ID
      SecurityGroupIngress: []
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-msk-sg'
        - Key: ManagedBy
          Value: Lakerunner
      VpcId: !Ref 'VpcId'
    Type: AWS::EC2::SecurityGroup
  MSKServiceRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: kafka.amazonaws.com
        Version: '2012-10-17'
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - secretsmanager:GetSecretValue
                  - secretsmanager:DescribeSecret
                Effect: Allow
                Resource: !Ref 'MSKCredentials'
            Version: '2012-10-17'
          PolicyName: MSKSecretsManagerAccess
      RoleName: !Sub '${AWS::StackName}-msk-service-role'
    Type: AWS::IAM::Role
  MSKTaskPolicy:
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - kafka:DescribeCluster
              - kafka:DescribeClusterV2
              - kafka:GetBootstrapBrokers
              - kafka-cluster:Connect
              - kafka-cluster:AlterCluster
              - kafka-cluster:DescribeCluster
            Effect: Allow
            Resource: !GetAtt 'MSKCluster.Arn'
          - Action:
              - kafka-cluster:*Topic*
              - kafka-cluster:WriteData
              - kafka-cluster:ReadData
            Effect: Allow
            Resource: !Sub
              - ${MSKClusterArn}/*
              - MSKClusterArn: !GetAtt 'MSKCluster.Arn'
          - Action:
              - kafka-cluster:AlterGroup
              - kafka-cluster:DescribeGroup
            Effect: Allow
            Resource: !Sub
              - ${MSKClusterArn}/*
              - MSKClusterArn: !GetAtt 'MSKCluster.Arn'
          - Action:
              - secretsmanager:GetSecretValue
              - secretsmanager:DescribeSecret
            Effect: Allow
            Resource: !Ref 'MSKCredentials'
        Version: '2012-10-17'
      PolicyName: MSKAccess
      Roles:
        - !If
          - UseExistingTaskRole
          - !Select
            - 1
            - !Split
              - /
              - !Ref 'ExistingTaskRoleArn'
          - !Ref 'MSKTaskRole'
    Type: AWS::IAM::Policy
  MSKTaskRole:
    Condition: CreateTaskRole
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: '2012-10-17'
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - ssm:GetParameter
                  - ssm:GetParameters
                Effect: Allow
                Resource:
                  - !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/lakerunner/*'
                  - !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${AWS::StackName}-*'
            Version: '2012-10-17'
          PolicyName: BaseECSTaskPolicy
      RoleName: !Sub '${AWS::StackName}-msk-task-role'
    Type: AWS::IAM::Role

