Conditions:
  IsInternetFacing: !Equals
    - !Ref 'AlbScheme'
    - internet-facing
Description: 'Lakerunner Grafana Service: Grafana service with ALB, PostgreSQL storage, and datasource configuration'
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Infrastructure
        Parameters:
          - CommonInfraStackName
          - ServicesStackName
          - AlbScheme
      - Label:
          default: Container Images
        Parameters:
          - GrafanaImage
          - GrafanaInitImage
          - GrafanaResetToken
    ParameterLabels:
      AlbScheme:
        default: ALB Scheme
      CommonInfraStackName:
        default: Common Infra Stack Name
      GrafanaImage:
        default: Grafana Image
      GrafanaInitImage:
        default: Grafana Init Image
      GrafanaResetToken:
        default: Grafana Reset Token
      ServicesStackName:
        default: Services Stack Name
Outputs:
  GrafanaAdminSecretArn:
    Description: 'ARN of the Grafana admin password secret. Use AWS CLI to retrieve: aws secretsmanager get-secret-value --secret-id <ARN>'
    Export:
      Name: !Sub '${AWS::StackName}-GrafanaAdminSecretArn'
    Value: !Ref 'GrafanaSecret'
  GrafanaAlbArn:
    Export:
      Name: !Sub '${AWS::StackName}-AlbArn'
    Value: !Ref 'GrafanaAlb'
  GrafanaAlbDNS:
    Export:
      Name: !Sub '${AWS::StackName}-AlbDNS'
    Value: !GetAtt 'GrafanaAlb.DNSName'
  GrafanaServiceArn:
    Export:
      Name: !Sub '${AWS::StackName}-ServiceArn'
    Value: !Ref 'GrafanaService'
  GrafanaUrl:
    Description: URL to access Grafana dashboard
    Value: !Sub
      - http://${GrafanaAlbDns}:3000
      - GrafanaAlbDns: !GetAtt 'GrafanaAlb.DNSName'
Parameters:
  AlbScheme:
    AllowedValues:
      - internet-facing
      - internal
    Default: internal
    Description: 'Load balancer scheme: ''internet-facing'' for external access or ''internal'' for internal access only.'
    Type: String
  CommonInfraStackName:
    Description: 'REQUIRED: Name of the CommonInfra stack to import infrastructure values from.'
    Type: String
  GrafanaImage:
    Default: grafana/grafana:latest
    Description: Container image for Grafana service
    Type: String
  GrafanaInitImage:
    Default: public.ecr.aws/cardinalhq.io/lakerunner/initcontainer-grafana:latest
    Description: Container image for Grafana init container (datasource provisioning and database setup)
    Type: String
  GrafanaResetToken:
    Default: change-to-reset-grafana
    Description: Reset token for Grafana data wipe. Changing this value will wipe all Grafana data on next deployment.
    Type: String
  ServicesStackName:
    Description: 'REQUIRED: Name of the Services stack to import Query API ALB DNS and port from.'
    Type: String
Resources:
  GrafanaAlb:
    Properties:
      Scheme: !Ref 'AlbScheme'
      SecurityGroups:
        - !Ref 'GrafanaAlbSecurityGroup'
      Subnets: !If
        - IsInternetFacing
        - !Split
          - ','
          - !ImportValue
            Fn::Sub:
              - ${CommonInfraStackName}-PublicSubnets
              - CommonInfraStackName: !Ref 'CommonInfraStackName'
        - !Split
          - ','
          - !ImportValue
            Fn::Sub:
              - ${CommonInfraStackName}-PrivateSubnets
              - CommonInfraStackName: !Ref 'CommonInfraStackName'
      Type: application
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
  GrafanaAlb3000Open:
    Properties:
      CidrIp: '0.0.0.0/0'
      Description: HTTP 3000 for Grafana
      FromPort: 3000
      GroupId: !Ref 'GrafanaAlbSecurityGroup'
      IpProtocol: tcp
      ToPort: 3000
    Type: AWS::EC2::SecurityGroupIngress
  GrafanaAlbSecurityGroup:
    Properties:
      GroupDescription: Security group for Grafana ALB
      SecurityGroupEgress:
        - CidrIp: '0.0.0.0/0'
          Description: Allow all outbound
          IpProtocol: '-1'
      VpcId: !ImportValue
        Fn::Sub:
          - ${CommonInfraStackName}-VpcId
          - CommonInfraStackName: !Ref 'CommonInfraStackName'
    Type: AWS::EC2::SecurityGroup
  GrafanaDatasourceConfig:
    Properties:
      Description: Grafana datasource configuration for Cardinal plugin
      Name: !Sub '${AWS::StackName}-grafana-datasource-config'
      Type: String
      Value: !Sub
        - |
          apiVersion: 1
          datasources:
          - access: proxy
            editable: true
            isDefault: true
            jsonData:
              customPath: http://${QUERY_API_ALB_DNS}:7101
            name: Cardinal
            secureJsonData:
              apiKey: f70603aa00e6f67999cc66e336134887
            type: cardinalhq-lakerunner-datasource
        - QUERY_API_ALB_DNS: !ImportValue
            Fn::Sub:
              - ${ServicesStackName}-AlbDNS
              - ServicesStackName: !Ref 'ServicesStackName'
    Type: AWS::SSM::Parameter
  GrafanaDbSecret:
    Properties:
      Description: Grafana database user password
      GenerateSecretString:
        ExcludeCharacters: ' !"#$%&''()*+,./:;<=>?@[\]^`{|}~'
        GenerateStringKey: password
        PasswordLength: 32
        SecretStringTemplate: '{"username": "grafana"}'
      Name: !Sub '${AWS::StackName}-grafana-db'
    Type: AWS::SecretsManager::Secret
  GrafanaExecRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: '2012-10-17'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - ssm:GetParameter
                  - ssm:GetParameters
                Effect: Allow
                Resource:
                  - !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${AWS::StackName}-*'
              - Action:
                  - ssmmessages:CreateControlChannel
                  - ssmmessages:CreateDataChannel
                  - ssmmessages:OpenControlChannel
                  - ssmmessages:OpenDataChannel
                Effect: Allow
                Resource: '*'
              - Action:
                  - secretsmanager:GetSecretValue
                Effect: Allow
                Resource:
                  - !Sub 'arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:${AWS::StackName}-*'
                  - !Sub
                    - ${DbSecretArn}*
                    - DbSecretArn: !ImportValue
                        Fn::Sub:
                          - ${CommonInfraStackName}-DbSecretArn
                          - CommonInfraStackName: !Ref 'CommonInfraStackName'
            Version: '2012-10-17'
          PolicyName: SSMParameterAccess
      RoleName: !Sub '${AWS::StackName}-exec-role'
    Type: AWS::IAM::Role
  GrafanaListener:
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref 'GrafanaTg'
          Type: forward
      LoadBalancerArn: !Ref 'GrafanaAlb'
      Port: '3000'
      Protocol: HTTP
    Type: AWS::ElasticLoadBalancingV2::Listener
  GrafanaLogGroup:
    Properties:
      LogGroupName: !Sub '/ecs/grafana'
      RetentionInDays: 14
    Type: AWS::Logs::LogGroup
  GrafanaSecret:
    Properties:
      Description: Grafana admin password
      GenerateSecretString:
        ExcludeCharacters: ' !"#$%&''()*+,./:;<=>?@[\]^`{|}~'
        GenerateStringKey: password
        PasswordLength: 32
        SecretStringTemplate: '{"username": "lakerunner"}'
      Name: !Sub '${AWS::StackName}-grafana-admin'
    Type: AWS::SecretsManager::Secret
  GrafanaService:
    DependsOn:
      - GrafanaListener
    Properties:
      Cluster: !ImportValue
        Fn::Sub:
          - ${CommonInfraStackName}-ClusterArn
          - CommonInfraStackName: !Ref 'CommonInfraStackName'
      DesiredCount: '1'
      EnableExecuteCommand: true
      LaunchType: FARGATE
      LoadBalancers:
        - ContainerName: GrafanaContainer
          ContainerPort: 3000
          TargetGroupArn: !Ref 'GrafanaTg'
      NetworkConfiguration:
        AwsvpcConfiguration:
          SecurityGroups:
            - !ImportValue
              Fn::Sub:
                - ${CommonInfraStackName}-TaskSGId
                - CommonInfraStackName: !Ref 'CommonInfraStackName'
          Subnets: !Split
            - ','
            - !ImportValue
              Fn::Sub:
                - ${CommonInfraStackName}-PrivateSubnets
                - CommonInfraStackName: !Ref 'CommonInfraStackName'
      ServiceName: grafana
      TaskDefinition: !Ref 'GrafanaTaskDef'
    Type: AWS::ECS::Service
  GrafanaTaskDef:
    Properties:
      ContainerDefinitions:
        - Environment:
            - Name: GRAFANA_DB_NAME
              Value: grafana
            - Name: GRAFANA_DB_USER
              Value: grafana
            - Name: PGHOST
              Value: !ImportValue
                Fn::Sub:
                  - ${CommonInfraStackName}-DbEndpoint
                  - CommonInfraStackName: !Ref 'CommonInfraStackName'
            - Name: PGPORT
              Value: !ImportValue
                Fn::Sub:
                  - ${CommonInfraStackName}-DbPort
                  - CommonInfraStackName: !Ref 'CommonInfraStackName'
            - Name: PGDATABASE
              Value: postgres
            - Name: PGSSLMODE
              Value: require
            - Name: RESET_TOKEN
              Value: !Ref 'GrafanaResetToken'
            - Name: GF_SECURITY_ADMIN_USER
              Value: lakerunner
          Essential: false
          Image: !Ref 'GrafanaInitImage'
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref 'GrafanaLogGroup'
              awslogs-region: !Ref 'AWS::Region'
              awslogs-stream-prefix: grafana-init
          Name: GrafanaInit
          Secrets:
            - Name: PGUSER
              ValueFrom: !Sub
                - '${DbSecretArn}:username::'
                - DbSecretArn: !ImportValue
                    Fn::Sub:
                      - ${CommonInfraStackName}-DbSecretArn
                      - CommonInfraStackName: !Ref 'CommonInfraStackName'
            - Name: PGPASSWORD
              ValueFrom: !Sub
                - '${DbSecretArn}:password::'
                - DbSecretArn: !ImportValue
                    Fn::Sub:
                      - ${CommonInfraStackName}-DbSecretArn
                      - CommonInfraStackName: !Ref 'CommonInfraStackName'
            - Name: GRAFANA_DB_PASSWORD
              ValueFrom: !Sub
                - '${SecretArn}:password::'
                - SecretArn: !Ref 'GrafanaDbSecret'
            - Name: GF_SECURITY_ADMIN_PASSWORD
              ValueFrom: !Sub
                - '${SecretArn}:password::'
                - SecretArn: !Ref 'GrafanaSecret'
        - DependsOn:
            - Condition: SUCCESS
              ContainerName: GrafanaInit
          Environment:
            - Name: BUMP_REVISION
              Value: '1'
            - Name: OTEL_SERVICE_NAME
              Value: grafana
            - Name: TMPDIR
              Value: /scratch
            - Name: HOME
              Value: /scratch
            - Name: GF_DATABASE_HOST
              Value: !ImportValue
                Fn::Sub:
                  - ${CommonInfraStackName}-DbEndpoint
                  - CommonInfraStackName: !Ref 'CommonInfraStackName'
            - Name: GF_DATABASE_PORT
              Value: !ImportValue
                Fn::Sub:
                  - ${CommonInfraStackName}-DbPort
                  - CommonInfraStackName: !Ref 'CommonInfraStackName'
            - Name: GF_DATABASE_NAME
              Value: grafana
            - Name: GF_DATABASE_USER
              Value: grafana
            - Name: GF_SECURITY_ADMIN_USER
              Value: lakerunner
            - Name: GF_SERVER_HTTP_PORT
              Value: '3000'
            - Name: GF_SERVER_ROOT_URL
              Value: '%(protocol)s://%(domain)s:%(http_port)s'
            - Name: GF_INSTALL_PLUGINS
              Value: https://github.com/cardinalhq/cardinalhq-lakerunner-datasource/releases/download/v1.2.0-rc.14/cardinalhq-lakerunner-datasource.zip;cardinalhq-lakerunner-datasource
            - Name: GF_PATHS_PROVISIONING
              Value: /etc/grafana/provisioning
            - Name: GF_SECURITY_ALLOW_EMBEDDING
              Value: 'true'
            - Name: GF_DATABASE_TYPE
              Value: postgres
            - Name: GF_DATABASE_SSL_MODE
              Value: require
          HealthCheck:
            Command:
              - CMD-SHELL
              - curl -f http://localhost:3000/api/health
            Interval: 30
            Retries: 3
            StartPeriod: 60
            Timeout: 5
          Image: !Ref 'GrafanaImage'
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref 'GrafanaLogGroup'
              awslogs-region: !Ref 'AWS::Region'
              awslogs-stream-prefix: grafana
          MountPoints:
            - ContainerPath: /scratch
              ReadOnly: false
              SourceVolume: scratch
          Name: GrafanaContainer
          PortMappings:
            - ContainerPort: 3000
              Protocol: tcp
          Secrets:
            - Name: GF_SECURITY_ADMIN_PASSWORD
              ValueFrom: !Sub
                - '${SecretArn}:password::'
                - SecretArn: !Ref 'GrafanaSecret'
            - Name: GF_DATABASE_PASSWORD
              ValueFrom: !Sub
                - '${SecretArn}:password::'
                - SecretArn: !Ref 'GrafanaDbSecret'
            - Name: GRAFANA_DATASOURCE_CONFIG
              ValueFrom: !Ref 'GrafanaDatasourceConfig'
          User: '0'
      Cpu: '512'
      ExecutionRoleArn: !GetAtt 'GrafanaExecRole.Arn'
      Family: grafana-task
      Memory: '1024'
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      RuntimePlatform:
        CpuArchitecture: ARM64
        OperatingSystemFamily: LINUX
      TaskRoleArn: !GetAtt 'GrafanaTaskRole.Arn'
      Volumes:
        - Name: scratch
    Type: AWS::ECS::TaskDefinition
  GrafanaTaskRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: '2012-10-17'
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Effect: Allow
                Resource: '*'
            Version: '2012-10-17'
          PolicyName: LogAccess
      RoleName: !Sub '${AWS::StackName}-task-role'
    Type: AWS::IAM::Role
  GrafanaTg:
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /api/health
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Matcher:
        HttpCode: '200'
      Port: 3000
      Protocol: HTTP
      TargetGroupAttributes:
        - Key: stickiness.enabled
          Value: 'false'
        - Key: deregistration_delay.timeout_seconds
          Value: '30'
      TargetType: ip
      UnhealthyThresholdCount: 3
      VpcId: !ImportValue
        Fn::Sub:
          - ${CommonInfraStackName}-VpcId
          - CommonInfraStackName: !Ref 'CommonInfraStackName'
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
  TaskFromGrafanaAlb3000:
    Properties:
      Description: Grafana ALB to tasks 3000
      FromPort: 3000
      GroupId: !ImportValue
        Fn::Sub:
          - ${CommonInfraStackName}-TaskSGId
          - CommonInfraStackName: !Ref 'CommonInfraStackName'
      IpProtocol: tcp
      SourceSecurityGroupId: !Ref 'GrafanaAlbSecurityGroup'
      ToPort: 3000
    Type: AWS::EC2::SecurityGroupIngress

